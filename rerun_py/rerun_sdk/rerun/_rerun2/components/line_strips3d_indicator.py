# DO NOT EDIT!: This file was auto-generated by crates/re_types_builder/src/codegen/python.rs:277.

from __future__ import annotations

from typing import Sequence, Union

import pyarrow as pa
from attrs import define, field

from .._baseclasses import (
    BaseExtensionArray,
    BaseExtensionType,
)

__all__ = [
    "LineStrips3DIndicator",
    "LineStrips3DIndicatorArray",
    "LineStrips3DIndicatorArrayLike",
    "LineStrips3DIndicatorLike",
    "LineStrips3DIndicatorType",
]


@define
class LineStrips3DIndicator:
    """
    Indicator component for the `rerun.components.LineStrips3DIndicator` archetype.

    Indicator components are data-less components used to give some extra context.
    The Rerun Viewer can make use of them to provide better heuristics and even improve performance
    in some cases.
    """

    LineStrips3DIndicator: () = field(converter=())


LineStrips3DIndicatorLike = LineStrips3DIndicator
LineStrips3DIndicatorArrayLike = Union[
    LineStrips3DIndicator,
    Sequence[LineStrips3DIndicatorLike],
]


# --- Arrow support ---


class LineStrips3DIndicatorType(BaseExtensionType):
    def __init__(self) -> None:
        pa.ExtensionType.__init__(self, pa.null(), "rerun.components.LineStrips3DIndicator")


class LineStrips3DIndicatorArray(BaseExtensionArray[LineStrips3DIndicatorArrayLike]):
    _EXTENSION_NAME = "rerun.components.LineStrips3DIndicator"
    _EXTENSION_TYPE = LineStrips3DIndicatorType

    @staticmethod
    def _native_to_pa_array(data: LineStrips3DIndicatorArrayLike, data_type: pa.DataType) -> pa.Array:
        raise NotImplementedError  # You need to implement "linestrips3dindicator_native_to_pa_array" in rerun_py/rerun_sdk/rerun/_rerun2/components/_overrides/line_strips3d_indicator.py


LineStrips3DIndicatorType._ARRAY_TYPE = LineStrips3DIndicatorArray

# TODO(cmc): bring back registration to pyarrow once legacy types are gone
# pa.register_extension_type(LineStrips3DIndicatorType())
