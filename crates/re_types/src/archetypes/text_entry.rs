// NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.

#![allow(trivial_numeric_casts)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::iter_on_single_items)]
#![allow(clippy::map_flatten)]
#![allow(clippy::match_wildcard_for_single_variants)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]
#![allow(clippy::unnecessary_cast)]

/// A 3D transform.
///
/// ## Example
///
/// ```ignore
/// //! Log some transforms.
///
/// use rerun::{
///    archetypes::Transform3D,
///    components::Vector3D,
///    datatypes::{
///        Angle, Mat3x3, RotationAxisAngle, Scale3D, TranslationAndMat3x3, TranslationRotationScale3D,
///    },
///    MsgSender, RecordingStreamBuilder,
/// };
/// use std::f32::consts::PI;
///
/// fn main() -> Result<(), Box<dyn std::error::Error>> {
///    let (rec_stream, storage) = RecordingStreamBuilder::new("transform").memory()?;
///
///    let vector = Vector3D::from((0.0, 1.0, 0.0));
///
///    MsgSender::new("base")
///        .with_component(&[vector])?
///        .send(&rec_stream)?;
///
///    MsgSender::from_archetype(
///        "base/translated",
///        &Transform3D::new(TranslationAndMat3x3::new([1.0, 0.0, 0.0], Mat3x3::IDENTITY)),
///    )?
///    .send(&rec_stream)?;
///
///    MsgSender::new("base/translated")
///        .with_component(&[vector])?
///        .send(&rec_stream)?;
///
///    MsgSender::from_archetype(
///        "base/rotated_scaled",
///        &Transform3D::new(TranslationRotationScale3D {
///            rotation: Some(RotationAxisAngle::new([0.0, 0.0, 1.0], Angle::Radians(PI / 4.)).into()),
///            scale: Some(Scale3D::from(2.0)),
///            ..Default::default()
///        }),
///    )?
///    .send(&rec_stream)?;
///
///    MsgSender::new("base/rotated_scaled")
///        .with_component(&[vector])?
///        .send(&rec_stream)?;
///
///    rerun::native_viewer::show(storage.take())?;
///    Ok(())
/// }
/// ```
#[derive(Clone, Debug, PartialEq)]
pub struct TextEntry<'s> {
    pub bodies: Vec<crate::components::Body<'s>>,
    pub levels: Option<Vec<crate::components::Level<'s>>>,
}

static REQUIRED_COMPONENTS: once_cell::sync::Lazy<[crate::ComponentName; 1usize]> =
    once_cell::sync::Lazy::new(|| ["rerun.label".into()]);
static RECOMMENDED_COMPONENTS: once_cell::sync::Lazy<[crate::ComponentName; 1usize]> =
    once_cell::sync::Lazy::new(|| ["rerun.label".into()]);
static OPTIONAL_COMPONENTS: once_cell::sync::Lazy<[crate::ComponentName; 0usize]> =
    once_cell::sync::Lazy::new(|| []);
static ALL_COMPONENTS: once_cell::sync::Lazy<[crate::ComponentName; 2usize]> =
    once_cell::sync::Lazy::new(|| ["rerun.label".into(), "rerun.label".into()]);

impl<'s> TextEntry<'s> {
    pub const NUM_COMPONENTS: usize = 2usize;
}

impl<'s> crate::Archetype<'s> for TextEntry<'s> {
    #[inline]
    fn name() -> crate::ArchetypeName {
        crate::ArchetypeName::Borrowed("rerun.archetypes.TextEntry")
    }

    #[inline]
    fn required_components() -> &'static [crate::ComponentName] {
        REQUIRED_COMPONENTS.as_slice()
    }

    #[inline]
    fn recommended_components() -> &'static [crate::ComponentName] {
        RECOMMENDED_COMPONENTS.as_slice()
    }

    #[inline]
    fn optional_components() -> &'static [crate::ComponentName] {
        OPTIONAL_COMPONENTS.as_slice()
    }

    #[inline]
    fn all_components() -> &'static [crate::ComponentName] {
        ALL_COMPONENTS.as_slice()
    }

    #[inline]
    fn try_to_arrow(
        &'s self,
    ) -> crate::SerializationResult<
        Vec<(::arrow2::datatypes::Field, Box<dyn ::arrow2::array::Array>)>,
    > {
        use crate::Loggable as _;
        Ok([
            {
                Some({
                    let array =
                        <crate::components::Body<'s>>::try_to_arrow(self.bodies.iter(), None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.components.Body".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.label".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("bodies", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .map_err(|err| crate::SerializationError::Context {
                    location: "rerun.archetypes.TextEntry#bodies".into(),
                    source: Box::new(err),
                })?
            },
            {
                self.levels
                    .as_ref()
                    .map(|many| {
                        let array = <crate::components::Level<'s>>::try_to_arrow(many.iter(), None);
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.components.Level".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.label".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("levels", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .map_err(|err| crate::SerializationError::Context {
                        location: "rerun.archetypes.TextEntry#levels".into(),
                        source: Box::new(err),
                    })?
            },
        ]
        .into_iter()
        .flatten()
        .collect())
    }

    #[inline]
    fn try_from_arrow(
        data: impl IntoIterator<Item = (::arrow2::datatypes::Field, &'s dyn ::arrow2::array::Array)>,
    ) -> crate::DeserializationResult<Self> {
        use crate::Loggable as _;
        let arrays_by_name: ::std::collections::HashMap<_, _> = data
            .into_iter()
            .map(|(field, array)| (field.name, array))
            .collect();
        let bodies = {
            let array = arrays_by_name
                .get("bodies")
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    backtrace: ::backtrace::Backtrace::new_unresolved(),
                })
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.archetypes.TextEntry#bodies".into(),
                    source: Box::new(err),
                })?;
            <crate::components::Body<'s>>::try_from_arrow_opt(&**array)
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.archetypes.TextEntry#bodies".into(),
                    source: Box::new(err),
                })?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        backtrace: ::backtrace::Backtrace::new_unresolved(),
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.archetypes.TextEntry#bodies".into(),
                    source: Box::new(err),
                })?
        };
        let levels = if let Some(array) = arrays_by_name.get("levels") {
            Some(
                <crate::components::Level<'s>>::try_from_arrow_opt(&**array)
                    .map_err(|err| crate::DeserializationError::Context {
                        location: "rerun.archetypes.TextEntry#levels".into(),
                        source: Box::new(err),
                    })?
                    .into_iter()
                    .map(|v| {
                        v.ok_or_else(|| crate::DeserializationError::MissingData {
                            backtrace: ::backtrace::Backtrace::new_unresolved(),
                        })
                    })
                    .collect::<crate::DeserializationResult<Vec<_>>>()
                    .map_err(|err| crate::DeserializationError::Context {
                        location: "rerun.archetypes.TextEntry#levels".into(),
                        source: Box::new(err),
                    })?,
            )
        } else {
            None
        };
        Ok(Self { bodies, levels })
    }
}

impl<'s> TextEntry<'s> {
    pub fn new(bodies: impl IntoIterator<Item = impl Into<crate::components::Body<'s>>>) -> Self {
        Self {
            bodies: bodies.into_iter().map(Into::into).collect(),
            levels: None,
        }
    }

    pub fn with_levels(
        mut self,
        levels: impl IntoIterator<Item = impl Into<crate::components::Level<'s>>>,
    ) -> Self {
        self.levels = Some(levels.into_iter().map(Into::into).collect());
        self
    }
}
