// NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.

#![allow(trivial_numeric_casts)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::iter_on_single_items)]
#![allow(clippy::map_flatten)]
#![allow(clippy::match_wildcard_for_single_variants)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]
#![allow(clippy::unnecessary_cast)]

#[derive(Clone, Debug, PartialEq)]
pub struct AffixFuzzer1<'s>(pub crate::testing::datatypes::AffixFuzzer1<'s>);

impl<'s, T: Into<crate::testing::datatypes::AffixFuzzer1<'s>>> From<T> for AffixFuzzer1<'s> {
    fn from(v: T) -> Self {
        Self(v.into())
    }
}

impl<'s> From<AffixFuzzer1<'s>> for ::std::borrow::Cow<'s, AffixFuzzer1<'s>> {
    #[inline]
    fn from(value: AffixFuzzer1<'s>) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'s> From<&'s AffixFuzzer1<'s>> for ::std::borrow::Cow<'s, AffixFuzzer1<'s>> {
    #[inline]
    fn from(value: &'s AffixFuzzer1<'s>) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl<'s> crate::Loggable<'s> for AffixFuzzer1<'s> {
    type Name = crate::ComponentName;
    type Item<'a> = Option<Self>;
    type Iter<'a> = Box<dyn Iterator<Item = Self::Item<'a>> + 'a>;
    #[inline]
    fn name() -> Self::Name {
        "rerun.testing.components.AffixFuzzer1".into()
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Struct(vec![
            Field {
                name: "single_float_optional".to_owned(),
                data_type: DataType::Float32,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "single_string_required".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "single_string_optional".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_floats_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Float32,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_required".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: false,
                    metadata: [].into(),
                })),
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "flattened_scalar".to_owned(),
                data_type: DataType::Float32,
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "almost_flattened_scalar".to_owned(),
                data_type: <crate::testing::datatypes::FlattenedScalar>::to_arrow_datatype(),
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "from_parent".to_owned(),
                data_type: DataType::Boolean,
                is_nullable: true,
                metadata: [].into(),
            },
        ])
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum.map(|datum| {
                        let Self(data0) = datum.into_owned();
                        data0
                    });
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                _ = data0_bitmap;
                _ = extension_wrapper;
                crate::testing::datatypes::AffixFuzzer1::<'s>::try_to_arrow_opt(
                    data0,
                    Some("rerun.testing.components.AffixFuzzer1"),
                )?
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok(
            crate::testing::datatypes::AffixFuzzer1::<'s>::try_from_arrow_opt(data)
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.testing.components.AffixFuzzer1#single_required".into(),
                    source: Box::new(err),
                })?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        backtrace: ::backtrace::Backtrace::new_unresolved(),
                    })
                })
                .map(|res| res.map(|v| Some(Self(v))))
                .collect::<crate::DeserializationResult<Vec<Option<_>>>>()
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.testing.components.AffixFuzzer1#single_required".into(),
                    source: Box::new(err),
                })?,
        )
    }

    #[inline]
    fn try_iter_from_arrow(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Self::Iter<'_>>
    where
        Self: Sized,
    {
        Ok(Box::new(Self::try_from_arrow_opt(data)?.into_iter()))
    }

    #[inline]
    fn convert_item_to_self(item: Self::Item<'_>) -> Option<Self> {
        item
    }
}

impl<'s> crate::Component<'s> for AffixFuzzer1<'s> {}

#[derive(Clone, Debug, PartialEq)]
pub struct AffixFuzzer2<'s>(pub crate::testing::datatypes::AffixFuzzer1<'s>);

impl<'s, T: Into<crate::testing::datatypes::AffixFuzzer1<'s>>> From<T> for AffixFuzzer2<'s> {
    fn from(v: T) -> Self {
        Self(v.into())
    }
}

impl<'s> From<AffixFuzzer2<'s>> for ::std::borrow::Cow<'s, AffixFuzzer2<'s>> {
    #[inline]
    fn from(value: AffixFuzzer2<'s>) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'s> From<&'s AffixFuzzer2<'s>> for ::std::borrow::Cow<'s, AffixFuzzer2<'s>> {
    #[inline]
    fn from(value: &'s AffixFuzzer2<'s>) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl<'s> crate::Loggable<'s> for AffixFuzzer2<'s> {
    type Name = crate::ComponentName;
    type Item<'a> = Option<Self>;
    type Iter<'a> = Box<dyn Iterator<Item = Self::Item<'a>> + 'a>;
    #[inline]
    fn name() -> Self::Name {
        "rerun.testing.components.AffixFuzzer2".into()
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Struct(vec![
            Field {
                name: "single_float_optional".to_owned(),
                data_type: DataType::Float32,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "single_string_required".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "single_string_optional".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_floats_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Float32,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_required".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: false,
                    metadata: [].into(),
                })),
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "flattened_scalar".to_owned(),
                data_type: DataType::Float32,
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "almost_flattened_scalar".to_owned(),
                data_type: <crate::testing::datatypes::FlattenedScalar>::to_arrow_datatype(),
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "from_parent".to_owned(),
                data_type: DataType::Boolean,
                is_nullable: true,
                metadata: [].into(),
            },
        ])
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum.map(|datum| {
                        let Self(data0) = datum.into_owned();
                        data0
                    });
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                _ = data0_bitmap;
                _ = extension_wrapper;
                crate::testing::datatypes::AffixFuzzer1::<'s>::try_to_arrow_opt(
                    data0,
                    Some("rerun.testing.components.AffixFuzzer2"),
                )?
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok(
            crate::testing::datatypes::AffixFuzzer1::<'s>::try_from_arrow_opt(data)
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.testing.components.AffixFuzzer2#single_required".into(),
                    source: Box::new(err),
                })?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        backtrace: ::backtrace::Backtrace::new_unresolved(),
                    })
                })
                .map(|res| res.map(|v| Some(Self(v))))
                .collect::<crate::DeserializationResult<Vec<Option<_>>>>()
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.testing.components.AffixFuzzer2#single_required".into(),
                    source: Box::new(err),
                })?,
        )
    }

    #[inline]
    fn try_iter_from_arrow(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Self::Iter<'_>>
    where
        Self: Sized,
    {
        Ok(Box::new(Self::try_from_arrow_opt(data)?.into_iter()))
    }

    #[inline]
    fn convert_item_to_self(item: Self::Item<'_>) -> Option<Self> {
        item
    }
}

impl<'s> crate::Component<'s> for AffixFuzzer2<'s> {}

#[derive(Clone, Debug, PartialEq)]
pub struct AffixFuzzer3<'s>(pub crate::testing::datatypes::AffixFuzzer1<'s>);

impl<'s, T: Into<crate::testing::datatypes::AffixFuzzer1<'s>>> From<T> for AffixFuzzer3<'s> {
    fn from(v: T) -> Self {
        Self(v.into())
    }
}

impl<'s> From<AffixFuzzer3<'s>> for ::std::borrow::Cow<'s, AffixFuzzer3<'s>> {
    #[inline]
    fn from(value: AffixFuzzer3<'s>) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'s> From<&'s AffixFuzzer3<'s>> for ::std::borrow::Cow<'s, AffixFuzzer3<'s>> {
    #[inline]
    fn from(value: &'s AffixFuzzer3<'s>) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl<'s> crate::Loggable<'s> for AffixFuzzer3<'s> {
    type Name = crate::ComponentName;
    type Item<'a> = Option<Self>;
    type Iter<'a> = Box<dyn Iterator<Item = Self::Item<'a>> + 'a>;
    #[inline]
    fn name() -> Self::Name {
        "rerun.testing.components.AffixFuzzer3".into()
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Struct(vec![
            Field {
                name: "single_float_optional".to_owned(),
                data_type: DataType::Float32,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "single_string_required".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "single_string_optional".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_floats_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Float32,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_required".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: false,
                    metadata: [].into(),
                })),
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "flattened_scalar".to_owned(),
                data_type: DataType::Float32,
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "almost_flattened_scalar".to_owned(),
                data_type: <crate::testing::datatypes::FlattenedScalar>::to_arrow_datatype(),
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "from_parent".to_owned(),
                data_type: DataType::Boolean,
                is_nullable: true,
                metadata: [].into(),
            },
        ])
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum.map(|datum| {
                        let Self(data0) = datum.into_owned();
                        data0
                    });
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                _ = data0_bitmap;
                _ = extension_wrapper;
                crate::testing::datatypes::AffixFuzzer1::<'s>::try_to_arrow_opt(
                    data0,
                    Some("rerun.testing.components.AffixFuzzer3"),
                )?
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok(
            crate::testing::datatypes::AffixFuzzer1::<'s>::try_from_arrow_opt(data)
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.testing.components.AffixFuzzer3#single_required".into(),
                    source: Box::new(err),
                })?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        backtrace: ::backtrace::Backtrace::new_unresolved(),
                    })
                })
                .map(|res| res.map(|v| Some(Self(v))))
                .collect::<crate::DeserializationResult<Vec<Option<_>>>>()
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.testing.components.AffixFuzzer3#single_required".into(),
                    source: Box::new(err),
                })?,
        )
    }

    #[inline]
    fn try_iter_from_arrow(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Self::Iter<'_>>
    where
        Self: Sized,
    {
        Ok(Box::new(Self::try_from_arrow_opt(data)?.into_iter()))
    }

    #[inline]
    fn convert_item_to_self(item: Self::Item<'_>) -> Option<Self> {
        item
    }
}

impl<'s> crate::Component<'s> for AffixFuzzer3<'s> {}

#[derive(Clone, Debug, PartialEq)]
pub struct AffixFuzzer4<'s>(pub Option<crate::testing::datatypes::AffixFuzzer1<'s>>);

impl<'s, T: Into<Option<crate::testing::datatypes::AffixFuzzer1<'s>>>> From<T>
    for AffixFuzzer4<'s>
{
    fn from(v: T) -> Self {
        Self(v.into())
    }
}

impl<'s> From<AffixFuzzer4<'s>> for ::std::borrow::Cow<'s, AffixFuzzer4<'s>> {
    #[inline]
    fn from(value: AffixFuzzer4<'s>) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'s> From<&'s AffixFuzzer4<'s>> for ::std::borrow::Cow<'s, AffixFuzzer4<'s>> {
    #[inline]
    fn from(value: &'s AffixFuzzer4<'s>) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl<'s> crate::Loggable<'s> for AffixFuzzer4<'s> {
    type Name = crate::ComponentName;
    type Item<'a> = Option<Self>;
    type Iter<'a> = Box<dyn Iterator<Item = Self::Item<'a>> + 'a>;
    #[inline]
    fn name() -> Self::Name {
        "rerun.testing.components.AffixFuzzer4".into()
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Struct(vec![
            Field {
                name: "single_float_optional".to_owned(),
                data_type: DataType::Float32,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "single_string_required".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "single_string_optional".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_floats_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Float32,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_required".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: false,
                    metadata: [].into(),
                })),
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "flattened_scalar".to_owned(),
                data_type: DataType::Float32,
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "almost_flattened_scalar".to_owned(),
                data_type: <crate::testing::datatypes::FlattenedScalar>::to_arrow_datatype(),
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "from_parent".to_owned(),
                data_type: DataType::Boolean,
                is_nullable: true,
                metadata: [].into(),
            },
        ])
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum
                        .map(|datum| {
                            let Self(data0) = datum.into_owned();
                            data0
                        })
                        .flatten();
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                _ = data0_bitmap;
                _ = extension_wrapper;
                crate::testing::datatypes::AffixFuzzer1::<'s>::try_to_arrow_opt(
                    data0,
                    Some("rerun.testing.components.AffixFuzzer4"),
                )?
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok(
            crate::testing::datatypes::AffixFuzzer1::<'s>::try_from_arrow_opt(data)
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.testing.components.AffixFuzzer4#single_optional".into(),
                    source: Box::new(err),
                })?
                .into_iter()
                .map(Ok)
                .map(|res| res.map(|v| Some(Self(v))))
                .collect::<crate::DeserializationResult<Vec<Option<_>>>>()
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.testing.components.AffixFuzzer4#single_optional".into(),
                    source: Box::new(err),
                })?,
        )
    }

    #[inline]
    fn try_iter_from_arrow(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Self::Iter<'_>>
    where
        Self: Sized,
    {
        Ok(Box::new(Self::try_from_arrow_opt(data)?.into_iter()))
    }

    #[inline]
    fn convert_item_to_self(item: Self::Item<'_>) -> Option<Self> {
        item
    }
}

impl<'s> crate::Component<'s> for AffixFuzzer4<'s> {}

#[derive(Clone, Debug, PartialEq)]
pub struct AffixFuzzer5<'s>(pub Option<crate::testing::datatypes::AffixFuzzer1<'s>>);

impl<'s, T: Into<Option<crate::testing::datatypes::AffixFuzzer1<'s>>>> From<T>
    for AffixFuzzer5<'s>
{
    fn from(v: T) -> Self {
        Self(v.into())
    }
}

impl<'s> From<AffixFuzzer5<'s>> for ::std::borrow::Cow<'s, AffixFuzzer5<'s>> {
    #[inline]
    fn from(value: AffixFuzzer5<'s>) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'s> From<&'s AffixFuzzer5<'s>> for ::std::borrow::Cow<'s, AffixFuzzer5<'s>> {
    #[inline]
    fn from(value: &'s AffixFuzzer5<'s>) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl<'s> crate::Loggable<'s> for AffixFuzzer5<'s> {
    type Name = crate::ComponentName;
    type Item<'a> = Option<Self>;
    type Iter<'a> = Box<dyn Iterator<Item = Self::Item<'a>> + 'a>;
    #[inline]
    fn name() -> Self::Name {
        "rerun.testing.components.AffixFuzzer5".into()
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Struct(vec![
            Field {
                name: "single_float_optional".to_owned(),
                data_type: DataType::Float32,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "single_string_required".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "single_string_optional".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_floats_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Float32,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_required".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: false,
                    metadata: [].into(),
                })),
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "flattened_scalar".to_owned(),
                data_type: DataType::Float32,
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "almost_flattened_scalar".to_owned(),
                data_type: <crate::testing::datatypes::FlattenedScalar>::to_arrow_datatype(),
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "from_parent".to_owned(),
                data_type: DataType::Boolean,
                is_nullable: true,
                metadata: [].into(),
            },
        ])
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum
                        .map(|datum| {
                            let Self(data0) = datum.into_owned();
                            data0
                        })
                        .flatten();
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                _ = data0_bitmap;
                _ = extension_wrapper;
                crate::testing::datatypes::AffixFuzzer1::<'s>::try_to_arrow_opt(
                    data0,
                    Some("rerun.testing.components.AffixFuzzer5"),
                )?
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok(
            crate::testing::datatypes::AffixFuzzer1::<'s>::try_from_arrow_opt(data)
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.testing.components.AffixFuzzer5#single_optional".into(),
                    source: Box::new(err),
                })?
                .into_iter()
                .map(Ok)
                .map(|res| res.map(|v| Some(Self(v))))
                .collect::<crate::DeserializationResult<Vec<Option<_>>>>()
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.testing.components.AffixFuzzer5#single_optional".into(),
                    source: Box::new(err),
                })?,
        )
    }

    #[inline]
    fn try_iter_from_arrow(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Self::Iter<'_>>
    where
        Self: Sized,
    {
        Ok(Box::new(Self::try_from_arrow_opt(data)?.into_iter()))
    }

    #[inline]
    fn convert_item_to_self(item: Self::Item<'_>) -> Option<Self> {
        item
    }
}

impl<'s> crate::Component<'s> for AffixFuzzer5<'s> {}

#[derive(Clone, Debug, PartialEq)]
pub struct AffixFuzzer6<'s>(pub Option<crate::testing::datatypes::AffixFuzzer1<'s>>);

impl<'s, T: Into<Option<crate::testing::datatypes::AffixFuzzer1<'s>>>> From<T>
    for AffixFuzzer6<'s>
{
    fn from(v: T) -> Self {
        Self(v.into())
    }
}

impl<'s> From<AffixFuzzer6<'s>> for ::std::borrow::Cow<'s, AffixFuzzer6<'s>> {
    #[inline]
    fn from(value: AffixFuzzer6<'s>) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'s> From<&'s AffixFuzzer6<'s>> for ::std::borrow::Cow<'s, AffixFuzzer6<'s>> {
    #[inline]
    fn from(value: &'s AffixFuzzer6<'s>) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl<'s> crate::Loggable<'s> for AffixFuzzer6<'s> {
    type Name = crate::ComponentName;
    type Item<'a> = Option<Self>;
    type Iter<'a> = Box<dyn Iterator<Item = Self::Item<'a>> + 'a>;
    #[inline]
    fn name() -> Self::Name {
        "rerun.testing.components.AffixFuzzer6".into()
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Struct(vec![
            Field {
                name: "single_float_optional".to_owned(),
                data_type: DataType::Float32,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "single_string_required".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "single_string_optional".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_floats_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Float32,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_required".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: false,
                    metadata: [].into(),
                })),
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "flattened_scalar".to_owned(),
                data_type: DataType::Float32,
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "almost_flattened_scalar".to_owned(),
                data_type: <crate::testing::datatypes::FlattenedScalar>::to_arrow_datatype(),
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "from_parent".to_owned(),
                data_type: DataType::Boolean,
                is_nullable: true,
                metadata: [].into(),
            },
        ])
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum
                        .map(|datum| {
                            let Self(data0) = datum.into_owned();
                            data0
                        })
                        .flatten();
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                _ = data0_bitmap;
                _ = extension_wrapper;
                crate::testing::datatypes::AffixFuzzer1::<'s>::try_to_arrow_opt(
                    data0,
                    Some("rerun.testing.components.AffixFuzzer6"),
                )?
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok(
            crate::testing::datatypes::AffixFuzzer1::<'s>::try_from_arrow_opt(data)
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.testing.components.AffixFuzzer6#single_optional".into(),
                    source: Box::new(err),
                })?
                .into_iter()
                .map(Ok)
                .map(|res| res.map(|v| Some(Self(v))))
                .collect::<crate::DeserializationResult<Vec<Option<_>>>>()
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.testing.components.AffixFuzzer6#single_optional".into(),
                    source: Box::new(err),
                })?,
        )
    }

    #[inline]
    fn try_iter_from_arrow(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Self::Iter<'_>>
    where
        Self: Sized,
    {
        Ok(Box::new(Self::try_from_arrow_opt(data)?.into_iter()))
    }

    #[inline]
    fn convert_item_to_self(item: Self::Item<'_>) -> Option<Self> {
        item
    }
}

impl<'s> crate::Component<'s> for AffixFuzzer6<'s> {}

#[derive(Clone, Debug, PartialEq)]
pub struct AffixFuzzer7<'s>(pub Option<Vec<crate::testing::datatypes::AffixFuzzer1<'s>>>);

impl<'s, I: Into<crate::testing::datatypes::AffixFuzzer1<'s>>, T: IntoIterator<Item = I>>
    From<Option<T>> for AffixFuzzer7<'s>
{
    fn from(v: Option<T>) -> Self {
        Self(v.map(|v| v.into_iter().map(|v| v.into()).collect()))
    }
}

impl<'s> From<AffixFuzzer7<'s>> for ::std::borrow::Cow<'s, AffixFuzzer7<'s>> {
    #[inline]
    fn from(value: AffixFuzzer7<'s>) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'s> From<&'s AffixFuzzer7<'s>> for ::std::borrow::Cow<'s, AffixFuzzer7<'s>> {
    #[inline]
    fn from(value: &'s AffixFuzzer7<'s>) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl<'s> crate::Loggable<'s> for AffixFuzzer7<'s> {
    type Name = crate::ComponentName;
    type Item<'a> = Option<Self>;
    type Iter<'a> = Box<dyn Iterator<Item = Self::Item<'a>> + 'a>;
    #[inline]
    fn name() -> Self::Name {
        "rerun.testing.components.AffixFuzzer7".into()
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::List(Box::new(Field {
            name: "item".to_owned(),
            data_type: <crate::testing::datatypes::AffixFuzzer1<'s>>::to_arrow_datatype(),
            is_nullable: true,
            metadata: [].into(),
        }))
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum
                        .map(|datum| {
                            let Self(data0) = datum.into_owned();
                            data0
                        })
                        .flatten();
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                let data0_inner_data: Vec<_> = data0
                    .iter()
                    .flatten()
                    .flatten()
                    .cloned()
                    .map(Some)
                    .collect();
                let data0_inner_bitmap: Option<::arrow2::bitmap::Bitmap> = None;
                let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                    data0
                        .iter()
                        .map(|opt| opt.as_ref().map(|datum| datum.len()).unwrap_or_default()),
                )
                .unwrap()
                .into();
                ListArray :: new ({ _ = extension_wrapper ; DataType :: Extension ("rerun.testing.components.AffixFuzzer7" . to_owned () , Box :: new (DataType :: List (Box :: new (Field { name : "item" . to_owned () , data_type : < crate :: testing :: datatypes :: AffixFuzzer1 :: < 's > > :: to_arrow_datatype () , is_nullable : true , metadata : [] . into () , }

))) , None) . to_logical_type () . clone () }

 , offsets , { _ = data0_inner_bitmap ; _ = extension_wrapper ; crate :: testing :: datatypes :: AffixFuzzer1 :: < 's > :: try_to_arrow_opt (data0_inner_data , Some ("rerun.testing.components.AffixFuzzer7")) ? }

 , data0_bitmap ,) . boxed ()
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let data = data
                .as_any()
                .downcast_ref::<::arrow2::array::ListArray<i32>>()
                .unwrap();
            if data.is_empty() {
                Vec::new()
            } else {
                let bitmap = data.validity().cloned();
                let offsets = {
                    let offsets = data.offsets();
                    offsets.iter().copied().zip(offsets.iter().copied().skip(1))
                };
                let data = &**data.values();
                let data = crate::testing::datatypes::AffixFuzzer1::<'s>::try_from_arrow_opt(data)
                    .map_err(|err| crate::DeserializationError::Context {
                        location: "rerun.testing.components.AffixFuzzer7#many_optional".into(),
                        source: Box::new(err),
                    })?
                    .into_iter()
                    .map(|v| {
                        v.ok_or_else(|| crate::DeserializationError::MissingData {
                            backtrace: ::backtrace::Backtrace::new_unresolved(),
                        })
                    })
                    .collect::<crate::DeserializationResult<Vec<_>>>()?;
                offsets
                    .enumerate()
                    .map(move |(i, (start, end))| {
                        bitmap
                            .as_ref()
                            .map_or(true, |bitmap| bitmap.get_bit(i))
                            .then(|| {
                                Ok(data
                                    .get(start as usize..end as usize)
                                    .ok_or(crate::DeserializationError::OffsetsMismatch {
                                        bounds: (start as usize, end as usize),
                                        len: data.len(),
                                        backtrace: ::backtrace::Backtrace::new_unresolved(),
                                    })?
                                    .to_vec())
                            })
                            .transpose()
                    })
                    .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?
            }
            .into_iter()
        }
        .map(Ok)
        .map(|res| res.map(|v| Some(Self(v))))
        .collect::<crate::DeserializationResult<Vec<Option<_>>>>()
        .map_err(|err| crate::DeserializationError::Context {
            location: "rerun.testing.components.AffixFuzzer7#many_optional".into(),
            source: Box::new(err),
        })?)
    }

    #[inline]
    fn try_iter_from_arrow(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Self::Iter<'_>>
    where
        Self: Sized,
    {
        Ok(Box::new(Self::try_from_arrow_opt(data)?.into_iter()))
    }

    #[inline]
    fn convert_item_to_self(item: Self::Item<'_>) -> Option<Self> {
        item
    }
}

impl<'s> crate::Component<'s> for AffixFuzzer7<'s> {}

#[derive(Clone, Debug, PartialEq)]
pub struct AffixFuzzer8(pub Option<f32>);

impl<'s> From<AffixFuzzer8> for ::std::borrow::Cow<'s, AffixFuzzer8> {
    #[inline]
    fn from(value: AffixFuzzer8) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'s> From<&'s AffixFuzzer8> for ::std::borrow::Cow<'s, AffixFuzzer8> {
    #[inline]
    fn from(value: &'s AffixFuzzer8) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl<'s> crate::Loggable<'s> for AffixFuzzer8 {
    type Name = crate::ComponentName;
    type Item<'a> = Option<Self>;
    type Iter<'a> = Box<dyn Iterator<Item = Self::Item<'a>> + 'a>;
    #[inline]
    fn name() -> Self::Name {
        "rerun.testing.components.AffixFuzzer8".into()
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Float32
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum
                        .map(|datum| {
                            let Self(data0) = datum.into_owned();
                            data0
                        })
                        .flatten();
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            PrimitiveArray::new(
                {
                    _ = extension_wrapper;
                    DataType::Extension(
                        "rerun.testing.components.AffixFuzzer8".to_owned(),
                        Box::new(DataType::Float32),
                        None,
                    )
                    .to_logical_type()
                    .clone()
                },
                data0.into_iter().map(|v| v.unwrap_or_default()).collect(),
                data0_bitmap,
            )
            .boxed()
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok(data
            .as_any()
            .downcast_ref::<Float32Array>()
            .unwrap()
            .into_iter()
            .map(|v| v.copied())
            .map(Ok)
            .map(|res| res.map(|v| Some(Self(v))))
            .collect::<crate::DeserializationResult<Vec<Option<_>>>>()
            .map_err(|err| crate::DeserializationError::Context {
                location: "rerun.testing.components.AffixFuzzer8#single_float_optional".into(),
                source: Box::new(err),
            })?)
    }

    #[inline]
    fn try_iter_from_arrow(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Self::Iter<'_>>
    where
        Self: Sized,
    {
        Ok(Box::new(Self::try_from_arrow_opt(data)?.into_iter()))
    }

    #[inline]
    fn convert_item_to_self(item: Self::Item<'_>) -> Option<Self> {
        item
    }
}

impl<'s> crate::Component<'s> for AffixFuzzer8 {}

#[derive(Clone, Debug, PartialEq, Eq)]
pub struct AffixFuzzer9<'s>(pub &'s str);

impl<'s> From<AffixFuzzer9<'s>> for ::std::borrow::Cow<'s, AffixFuzzer9<'s>> {
    #[inline]
    fn from(value: AffixFuzzer9<'s>) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'s> From<&'s AffixFuzzer9<'s>> for ::std::borrow::Cow<'s, AffixFuzzer9<'s>> {
    #[inline]
    fn from(value: &'s AffixFuzzer9<'s>) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl<'s> crate::Loggable<'s> for AffixFuzzer9<'s> {
    type Name = crate::ComponentName;
    type Item<'a> = Option<Self>;
    type Iter<'a> = Box<dyn Iterator<Item = Self::Item<'a>> + 'a>;
    #[inline]
    fn name() -> Self::Name {
        "rerun.testing.components.AffixFuzzer9".into()
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Utf8
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum.map(|datum| {
                        let Self(data0) = datum.into_owned();
                        data0
                    });
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                let inner_data: ::arrow2::buffer::Buffer<u8> =
                    data0.iter().flatten().flat_map(|s| s.bytes()).collect();
                let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                    data0
                        .iter()
                        .map(|opt| opt.as_ref().map(|datum| datum.len()).unwrap_or_default()),
                )
                .unwrap()
                .into();
                #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                unsafe {
                    Utf8Array::<i32>::new_unchecked(
                        {
                            _ = extension_wrapper;
                            DataType::Extension(
                                "rerun.testing.components.AffixFuzzer9".to_owned(),
                                Box::new(DataType::Utf8),
                                None,
                            )
                            .to_logical_type()
                            .clone()
                        },
                        offsets,
                        inner_data,
                        data0_bitmap,
                    )
                }
                .boxed()
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok(data
            .as_any()
            .downcast_ref::<Utf8Array<i32>>()
            .unwrap()
            .into_iter()
            .map(|v| {
                v.ok_or_else(|| crate::DeserializationError::MissingData {
                    backtrace: ::backtrace::Backtrace::new_unresolved(),
                })
            })
            .map(|res| res.map(|v| Some(Self(v))))
            .collect::<crate::DeserializationResult<Vec<Option<_>>>>()
            .map_err(|err| crate::DeserializationError::Context {
                location: "rerun.testing.components.AffixFuzzer9#single_string_required".into(),
                source: Box::new(err),
            })?)
    }

    #[inline]
    fn try_iter_from_arrow(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Self::Iter<'_>>
    where
        Self: Sized,
    {
        Ok(Box::new(Self::try_from_arrow_opt(data)?.into_iter()))
    }

    #[inline]
    fn convert_item_to_self(item: Self::Item<'_>) -> Option<Self> {
        item
    }
}

impl<'s> crate::Component<'s> for AffixFuzzer9<'s> {}

#[derive(Clone, Debug, PartialEq, Eq)]
pub struct AffixFuzzer10<'s>(pub Option<&'s str>);

impl<'s> From<AffixFuzzer10<'s>> for ::std::borrow::Cow<'s, AffixFuzzer10<'s>> {
    #[inline]
    fn from(value: AffixFuzzer10<'s>) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'s> From<&'s AffixFuzzer10<'s>> for ::std::borrow::Cow<'s, AffixFuzzer10<'s>> {
    #[inline]
    fn from(value: &'s AffixFuzzer10<'s>) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl<'s> crate::Loggable<'s> for AffixFuzzer10<'s> {
    type Name = crate::ComponentName;
    type Item<'a> = Option<Self>;
    type Iter<'a> = Box<dyn Iterator<Item = Self::Item<'a>> + 'a>;
    #[inline]
    fn name() -> Self::Name {
        "rerun.testing.components.AffixFuzzer10".into()
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Utf8
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum
                        .map(|datum| {
                            let Self(data0) = datum.into_owned();
                            data0
                        })
                        .flatten();
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                let inner_data: ::arrow2::buffer::Buffer<u8> =
                    data0.iter().flatten().flat_map(|s| s.bytes()).collect();
                let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                    data0
                        .iter()
                        .map(|opt| opt.as_ref().map(|datum| datum.len()).unwrap_or_default()),
                )
                .unwrap()
                .into();
                #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                unsafe {
                    Utf8Array::<i32>::new_unchecked(
                        {
                            _ = extension_wrapper;
                            DataType::Extension(
                                "rerun.testing.components.AffixFuzzer10".to_owned(),
                                Box::new(DataType::Utf8),
                                None,
                            )
                            .to_logical_type()
                            .clone()
                        },
                        offsets,
                        inner_data,
                        data0_bitmap,
                    )
                }
                .boxed()
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok(data
            .as_any()
            .downcast_ref::<Utf8Array<i32>>()
            .unwrap()
            .into_iter()
            .map(Ok)
            .map(|res| res.map(|v| Some(Self(v))))
            .collect::<crate::DeserializationResult<Vec<Option<_>>>>()
            .map_err(|err| crate::DeserializationError::Context {
                location: "rerun.testing.components.AffixFuzzer10#single_string_optional".into(),
                source: Box::new(err),
            })?)
    }

    #[inline]
    fn try_iter_from_arrow(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Self::Iter<'_>>
    where
        Self: Sized,
    {
        Ok(Box::new(Self::try_from_arrow_opt(data)?.into_iter()))
    }

    #[inline]
    fn convert_item_to_self(item: Self::Item<'_>) -> Option<Self> {
        item
    }
}

impl<'s> crate::Component<'s> for AffixFuzzer10<'s> {}

#[derive(Clone, Debug, PartialEq)]
pub struct AffixFuzzer11(pub Option<Vec<f32>>);

impl<'s> From<AffixFuzzer11> for ::std::borrow::Cow<'s, AffixFuzzer11> {
    #[inline]
    fn from(value: AffixFuzzer11) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'s> From<&'s AffixFuzzer11> for ::std::borrow::Cow<'s, AffixFuzzer11> {
    #[inline]
    fn from(value: &'s AffixFuzzer11) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl<'s> crate::Loggable<'s> for AffixFuzzer11 {
    type Name = crate::ComponentName;
    type Item<'a> = Option<Self>;
    type Iter<'a> = Box<dyn Iterator<Item = Self::Item<'a>> + 'a>;
    #[inline]
    fn name() -> Self::Name {
        "rerun.testing.components.AffixFuzzer11".into()
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::List(Box::new(Field {
            name: "item".to_owned(),
            data_type: DataType::Float32,
            is_nullable: true,
            metadata: [].into(),
        }))
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum
                        .map(|datum| {
                            let Self(data0) = datum.into_owned();
                            data0
                        })
                        .flatten();
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                let data0_inner_data: Vec<_> = data0
                    .iter()
                    .flatten()
                    .flatten()
                    .cloned()
                    .map(Some)
                    .collect();
                let data0_inner_bitmap: Option<::arrow2::bitmap::Bitmap> = None;
                let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                    data0
                        .iter()
                        .map(|opt| opt.as_ref().map(|datum| datum.len()).unwrap_or_default()),
                )
                .unwrap()
                .into();
                ListArray::new(
                    {
                        _ = extension_wrapper;
                        DataType::Extension(
                            "rerun.testing.components.AffixFuzzer11".to_owned(),
                            Box::new(DataType::List(Box::new(Field {
                                name: "item".to_owned(),
                                data_type: DataType::Float32,
                                is_nullable: true,
                                metadata: [].into(),
                            }))),
                            None,
                        )
                        .to_logical_type()
                        .clone()
                    },
                    offsets,
                    PrimitiveArray::new(
                        {
                            _ = extension_wrapper;
                            DataType::Extension(
                                "rerun.testing.components.AffixFuzzer11".to_owned(),
                                Box::new(DataType::Float32),
                                None,
                            )
                            .to_logical_type()
                            .clone()
                        },
                        data0_inner_data
                            .into_iter()
                            .map(|v| v.unwrap_or_default())
                            .collect(),
                        data0_inner_bitmap,
                    )
                    .boxed(),
                    data0_bitmap,
                )
                .boxed()
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let data = data
                .as_any()
                .downcast_ref::<::arrow2::array::ListArray<i32>>()
                .unwrap();
            if data.is_empty() {
                Vec::new()
            } else {
                let bitmap = data.validity().cloned();
                let offsets = {
                    let offsets = data.offsets();
                    offsets.iter().copied().zip(offsets.iter().copied().skip(1))
                };
                let data = &**data.values();
                let data = data
                    .as_any()
                    .downcast_ref::<Float32Array>()
                    .unwrap()
                    .into_iter()
                    .map(|v| v.copied())
                    .map(|v| {
                        v.ok_or_else(|| crate::DeserializationError::MissingData {
                            backtrace: ::backtrace::Backtrace::new_unresolved(),
                        })
                    })
                    .collect::<crate::DeserializationResult<Vec<_>>>()?;
                offsets
                    .enumerate()
                    .map(move |(i, (start, end))| {
                        bitmap
                            .as_ref()
                            .map_or(true, |bitmap| bitmap.get_bit(i))
                            .then(|| {
                                Ok(data
                                    .get(start as usize..end as usize)
                                    .ok_or(crate::DeserializationError::OffsetsMismatch {
                                        bounds: (start as usize, end as usize),
                                        len: data.len(),
                                        backtrace: ::backtrace::Backtrace::new_unresolved(),
                                    })?
                                    .to_vec())
                            })
                            .transpose()
                    })
                    .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?
            }
            .into_iter()
        }
        .map(Ok)
        .map(|res| res.map(|v| Some(Self(v))))
        .collect::<crate::DeserializationResult<Vec<Option<_>>>>()
        .map_err(|err| crate::DeserializationError::Context {
            location: "rerun.testing.components.AffixFuzzer11#many_floats_optional".into(),
            source: Box::new(err),
        })?)
    }

    #[inline]
    fn try_iter_from_arrow(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Self::Iter<'_>>
    where
        Self: Sized,
    {
        Ok(Box::new(Self::try_from_arrow_opt(data)?.into_iter()))
    }

    #[inline]
    fn convert_item_to_self(item: Self::Item<'_>) -> Option<Self> {
        item
    }
}

impl<'s> crate::Component<'s> for AffixFuzzer11 {}

#[derive(Clone, Debug, PartialEq, Eq)]
pub struct AffixFuzzer12<'s>(pub Vec<&'s str>);

impl<'s> From<AffixFuzzer12<'s>> for ::std::borrow::Cow<'s, AffixFuzzer12<'s>> {
    #[inline]
    fn from(value: AffixFuzzer12<'s>) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'s> From<&'s AffixFuzzer12<'s>> for ::std::borrow::Cow<'s, AffixFuzzer12<'s>> {
    #[inline]
    fn from(value: &'s AffixFuzzer12<'s>) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl<'s> crate::Loggable<'s> for AffixFuzzer12<'s> {
    type Name = crate::ComponentName;
    type Item<'a> = Option<Self>;
    type Iter<'a> = Box<dyn Iterator<Item = Self::Item<'a>> + 'a>;
    #[inline]
    fn name() -> Self::Name {
        "rerun.testing.components.AffixFuzzer12".into()
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::List(Box::new(Field {
            name: "item".to_owned(),
            data_type: DataType::Utf8,
            is_nullable: false,
            metadata: [].into(),
        }))
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum.map(|datum| {
                        let Self(data0) = datum.into_owned();
                        data0
                    });
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                let data0_inner_data: Vec<_> = data0
                    .iter()
                    .flatten()
                    .flatten()
                    .cloned()
                    .map(Some)
                    .collect();
                let data0_inner_bitmap: Option<::arrow2::bitmap::Bitmap> = None;
                let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                    data0
                        .iter()
                        .map(|opt| opt.as_ref().map(|datum| datum.len()).unwrap_or_default()),
                )
                .unwrap()
                .into();
                ListArray::new(
                    {
                        _ = extension_wrapper;
                        DataType::Extension(
                            "rerun.testing.components.AffixFuzzer12".to_owned(),
                            Box::new(DataType::List(Box::new(Field {
                                name: "item".to_owned(),
                                data_type: DataType::Utf8,
                                is_nullable: false,
                                metadata: [].into(),
                            }))),
                            None,
                        )
                        .to_logical_type()
                        .clone()
                    },
                    offsets,
                    {
                        let inner_data: ::arrow2::buffer::Buffer<u8> = data0_inner_data
                            .iter()
                            .flatten()
                            .flat_map(|s| s.bytes())
                            .collect();
                        let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                            data0_inner_data.iter().map(|opt| {
                                opt.as_ref().map(|datum| datum.len()).unwrap_or_default()
                            }),
                        )
                        .unwrap()
                        .into();
                        #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                        unsafe {
                            Utf8Array::<i32>::new_unchecked(
                                {
                                    _ = extension_wrapper;
                                    DataType::Extension(
                                        "rerun.testing.components.AffixFuzzer12".to_owned(),
                                        Box::new(DataType::Utf8),
                                        None,
                                    )
                                    .to_logical_type()
                                    .clone()
                                },
                                offsets,
                                inner_data,
                                data0_inner_bitmap,
                            )
                        }
                        .boxed()
                    },
                    data0_bitmap,
                )
                .boxed()
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let data = data
                .as_any()
                .downcast_ref::<::arrow2::array::ListArray<i32>>()
                .unwrap();
            if data.is_empty() {
                Vec::new()
            } else {
                let bitmap = data.validity().cloned();
                let offsets = {
                    let offsets = data.offsets();
                    offsets.iter().copied().zip(offsets.iter().copied().skip(1))
                };
                let data = &**data.values();
                let data = data
                    .as_any()
                    .downcast_ref::<Utf8Array<i32>>()
                    .unwrap()
                    .into_iter()
                    .map(|v| {
                        v.ok_or_else(|| crate::DeserializationError::MissingData {
                            backtrace: ::backtrace::Backtrace::new_unresolved(),
                        })
                    })
                    .collect::<crate::DeserializationResult<Vec<_>>>()?;
                offsets
                    .enumerate()
                    .map(move |(i, (start, end))| {
                        bitmap
                            .as_ref()
                            .map_or(true, |bitmap| bitmap.get_bit(i))
                            .then(|| {
                                Ok(data
                                    .get(start as usize..end as usize)
                                    .ok_or(crate::DeserializationError::OffsetsMismatch {
                                        bounds: (start as usize, end as usize),
                                        len: data.len(),
                                        backtrace: ::backtrace::Backtrace::new_unresolved(),
                                    })?
                                    .to_vec())
                            })
                            .transpose()
                    })
                    .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?
            }
            .into_iter()
        }
        .map(|v| {
            v.ok_or_else(|| crate::DeserializationError::MissingData {
                backtrace: ::backtrace::Backtrace::new_unresolved(),
            })
        })
        .map(|res| res.map(|v| Some(Self(v))))
        .collect::<crate::DeserializationResult<Vec<Option<_>>>>()
        .map_err(|err| crate::DeserializationError::Context {
            location: "rerun.testing.components.AffixFuzzer12#many_strings_required".into(),
            source: Box::new(err),
        })?)
    }

    #[inline]
    fn try_iter_from_arrow(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Self::Iter<'_>>
    where
        Self: Sized,
    {
        Ok(Box::new(Self::try_from_arrow_opt(data)?.into_iter()))
    }

    #[inline]
    fn convert_item_to_self(item: Self::Item<'_>) -> Option<Self> {
        item
    }
}

impl<'s> crate::Component<'s> for AffixFuzzer12<'s> {}

#[derive(Clone, Debug, PartialEq, Eq)]
pub struct AffixFuzzer13<'s>(pub Option<Vec<&'s str>>);

impl<'s> From<AffixFuzzer13<'s>> for ::std::borrow::Cow<'s, AffixFuzzer13<'s>> {
    #[inline]
    fn from(value: AffixFuzzer13<'s>) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'s> From<&'s AffixFuzzer13<'s>> for ::std::borrow::Cow<'s, AffixFuzzer13<'s>> {
    #[inline]
    fn from(value: &'s AffixFuzzer13<'s>) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl<'s> crate::Loggable<'s> for AffixFuzzer13<'s> {
    type Name = crate::ComponentName;
    type Item<'a> = Option<Self>;
    type Iter<'a> = Box<dyn Iterator<Item = Self::Item<'a>> + 'a>;
    #[inline]
    fn name() -> Self::Name {
        "rerun.testing.components.AffixFuzzer13".into()
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::List(Box::new(Field {
            name: "item".to_owned(),
            data_type: DataType::Utf8,
            is_nullable: true,
            metadata: [].into(),
        }))
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum
                        .map(|datum| {
                            let Self(data0) = datum.into_owned();
                            data0
                        })
                        .flatten();
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                let data0_inner_data: Vec<_> = data0
                    .iter()
                    .flatten()
                    .flatten()
                    .cloned()
                    .map(Some)
                    .collect();
                let data0_inner_bitmap: Option<::arrow2::bitmap::Bitmap> = None;
                let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                    data0
                        .iter()
                        .map(|opt| opt.as_ref().map(|datum| datum.len()).unwrap_or_default()),
                )
                .unwrap()
                .into();
                ListArray::new(
                    {
                        _ = extension_wrapper;
                        DataType::Extension(
                            "rerun.testing.components.AffixFuzzer13".to_owned(),
                            Box::new(DataType::List(Box::new(Field {
                                name: "item".to_owned(),
                                data_type: DataType::Utf8,
                                is_nullable: true,
                                metadata: [].into(),
                            }))),
                            None,
                        )
                        .to_logical_type()
                        .clone()
                    },
                    offsets,
                    {
                        let inner_data: ::arrow2::buffer::Buffer<u8> = data0_inner_data
                            .iter()
                            .flatten()
                            .flat_map(|s| s.bytes())
                            .collect();
                        let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                            data0_inner_data.iter().map(|opt| {
                                opt.as_ref().map(|datum| datum.len()).unwrap_or_default()
                            }),
                        )
                        .unwrap()
                        .into();
                        #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                        unsafe {
                            Utf8Array::<i32>::new_unchecked(
                                {
                                    _ = extension_wrapper;
                                    DataType::Extension(
                                        "rerun.testing.components.AffixFuzzer13".to_owned(),
                                        Box::new(DataType::Utf8),
                                        None,
                                    )
                                    .to_logical_type()
                                    .clone()
                                },
                                offsets,
                                inner_data,
                                data0_inner_bitmap,
                            )
                        }
                        .boxed()
                    },
                    data0_bitmap,
                )
                .boxed()
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let data = data
                .as_any()
                .downcast_ref::<::arrow2::array::ListArray<i32>>()
                .unwrap();
            if data.is_empty() {
                Vec::new()
            } else {
                let bitmap = data.validity().cloned();
                let offsets = {
                    let offsets = data.offsets();
                    offsets.iter().copied().zip(offsets.iter().copied().skip(1))
                };
                let data = &**data.values();
                let data = data
                    .as_any()
                    .downcast_ref::<Utf8Array<i32>>()
                    .unwrap()
                    .into_iter()
                    .map(|v| {
                        v.ok_or_else(|| crate::DeserializationError::MissingData {
                            backtrace: ::backtrace::Backtrace::new_unresolved(),
                        })
                    })
                    .collect::<crate::DeserializationResult<Vec<_>>>()?;
                offsets
                    .enumerate()
                    .map(move |(i, (start, end))| {
                        bitmap
                            .as_ref()
                            .map_or(true, |bitmap| bitmap.get_bit(i))
                            .then(|| {
                                Ok(data
                                    .get(start as usize..end as usize)
                                    .ok_or(crate::DeserializationError::OffsetsMismatch {
                                        bounds: (start as usize, end as usize),
                                        len: data.len(),
                                        backtrace: ::backtrace::Backtrace::new_unresolved(),
                                    })?
                                    .to_vec())
                            })
                            .transpose()
                    })
                    .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?
            }
            .into_iter()
        }
        .map(Ok)
        .map(|res| res.map(|v| Some(Self(v))))
        .collect::<crate::DeserializationResult<Vec<Option<_>>>>()
        .map_err(|err| crate::DeserializationError::Context {
            location: "rerun.testing.components.AffixFuzzer13#many_strings_optional".into(),
            source: Box::new(err),
        })?)
    }

    #[inline]
    fn try_iter_from_arrow(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Self::Iter<'_>>
    where
        Self: Sized,
    {
        Ok(Box::new(Self::try_from_arrow_opt(data)?.into_iter()))
    }

    #[inline]
    fn convert_item_to_self(item: Self::Item<'_>) -> Option<Self> {
        item
    }
}

impl<'s> crate::Component<'s> for AffixFuzzer13<'s> {}

#[derive(Clone, Debug, PartialEq)]
pub struct AffixFuzzer14<'s>(pub crate::testing::datatypes::AffixFuzzer3<'s>);

impl<'s, T: Into<crate::testing::datatypes::AffixFuzzer3<'s>>> From<T> for AffixFuzzer14<'s> {
    fn from(v: T) -> Self {
        Self(v.into())
    }
}

impl<'s> From<AffixFuzzer14<'s>> for ::std::borrow::Cow<'s, AffixFuzzer14<'s>> {
    #[inline]
    fn from(value: AffixFuzzer14<'s>) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'s> From<&'s AffixFuzzer14<'s>> for ::std::borrow::Cow<'s, AffixFuzzer14<'s>> {
    #[inline]
    fn from(value: &'s AffixFuzzer14<'s>) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl<'s> crate::Loggable<'s> for AffixFuzzer14<'s> {
    type Name = crate::ComponentName;
    type Item<'a> = Option<Self>;
    type Iter<'a> = Box<dyn Iterator<Item = Self::Item<'a>> + 'a>;
    #[inline]
    fn name() -> Self::Name {
        "rerun.testing.components.AffixFuzzer14".into()
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Union(
            vec![
                Field {
                    name: "_null_markers".to_owned(),
                    data_type: DataType::Null,
                    is_nullable: true,
                    metadata: [].into(),
                },
                Field {
                    name: "degrees".to_owned(),
                    data_type: DataType::Float32,
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "radians".to_owned(),
                    data_type: DataType::Float32,
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "craziness".to_owned(),
                    data_type: DataType::List(Box::new(Field {
                        name: "item".to_owned(),
                        data_type: <crate::testing::datatypes::AffixFuzzer1<'s>>::to_arrow_datatype(
                        ),
                        is_nullable: false,
                        metadata: [].into(),
                    })),
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "fixed_size_shenanigans".to_owned(),
                    data_type: DataType::FixedSizeList(
                        Box::new(Field {
                            name: "item".to_owned(),
                            data_type: DataType::Float32,
                            is_nullable: false,
                            metadata: [].into(),
                        }),
                        3usize,
                    ),
                    is_nullable: false,
                    metadata: [].into(),
                },
            ],
            Some(vec![0i32, 1i32, 2i32, 3i32, 4i32]),
            UnionMode::Dense,
        )
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum.map(|datum| {
                        let Self(data0) = datum.into_owned();
                        data0
                    });
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                _ = data0_bitmap;
                _ = extension_wrapper;
                crate::testing::datatypes::AffixFuzzer3::<'s>::try_to_arrow_opt(
                    data0,
                    Some("rerun.testing.components.AffixFuzzer14"),
                )?
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok(
            crate::testing::datatypes::AffixFuzzer3::<'s>::try_from_arrow_opt(data)
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.testing.components.AffixFuzzer14#single_required_union".into(),
                    source: Box::new(err),
                })?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        backtrace: ::backtrace::Backtrace::new_unresolved(),
                    })
                })
                .map(|res| res.map(|v| Some(Self(v))))
                .collect::<crate::DeserializationResult<Vec<Option<_>>>>()
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.testing.components.AffixFuzzer14#single_required_union".into(),
                    source: Box::new(err),
                })?,
        )
    }

    #[inline]
    fn try_iter_from_arrow(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Self::Iter<'_>>
    where
        Self: Sized,
    {
        Ok(Box::new(Self::try_from_arrow_opt(data)?.into_iter()))
    }

    #[inline]
    fn convert_item_to_self(item: Self::Item<'_>) -> Option<Self> {
        item
    }
}

impl<'s> crate::Component<'s> for AffixFuzzer14<'s> {}

#[derive(Clone, Debug, PartialEq)]
pub struct AffixFuzzer15<'s>(pub Option<crate::testing::datatypes::AffixFuzzer3<'s>>);

impl<'s, T: Into<Option<crate::testing::datatypes::AffixFuzzer3<'s>>>> From<T>
    for AffixFuzzer15<'s>
{
    fn from(v: T) -> Self {
        Self(v.into())
    }
}

impl<'s> From<AffixFuzzer15<'s>> for ::std::borrow::Cow<'s, AffixFuzzer15<'s>> {
    #[inline]
    fn from(value: AffixFuzzer15<'s>) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'s> From<&'s AffixFuzzer15<'s>> for ::std::borrow::Cow<'s, AffixFuzzer15<'s>> {
    #[inline]
    fn from(value: &'s AffixFuzzer15<'s>) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl<'s> crate::Loggable<'s> for AffixFuzzer15<'s> {
    type Name = crate::ComponentName;
    type Item<'a> = Option<Self>;
    type Iter<'a> = Box<dyn Iterator<Item = Self::Item<'a>> + 'a>;
    #[inline]
    fn name() -> Self::Name {
        "rerun.testing.components.AffixFuzzer15".into()
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Union(
            vec![
                Field {
                    name: "_null_markers".to_owned(),
                    data_type: DataType::Null,
                    is_nullable: true,
                    metadata: [].into(),
                },
                Field {
                    name: "degrees".to_owned(),
                    data_type: DataType::Float32,
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "radians".to_owned(),
                    data_type: DataType::Float32,
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "craziness".to_owned(),
                    data_type: DataType::List(Box::new(Field {
                        name: "item".to_owned(),
                        data_type: <crate::testing::datatypes::AffixFuzzer1<'s>>::to_arrow_datatype(
                        ),
                        is_nullable: false,
                        metadata: [].into(),
                    })),
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "fixed_size_shenanigans".to_owned(),
                    data_type: DataType::FixedSizeList(
                        Box::new(Field {
                            name: "item".to_owned(),
                            data_type: DataType::Float32,
                            is_nullable: false,
                            metadata: [].into(),
                        }),
                        3usize,
                    ),
                    is_nullable: false,
                    metadata: [].into(),
                },
            ],
            Some(vec![0i32, 1i32, 2i32, 3i32, 4i32]),
            UnionMode::Dense,
        )
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum
                        .map(|datum| {
                            let Self(data0) = datum.into_owned();
                            data0
                        })
                        .flatten();
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                _ = data0_bitmap;
                _ = extension_wrapper;
                crate::testing::datatypes::AffixFuzzer3::<'s>::try_to_arrow_opt(
                    data0,
                    Some("rerun.testing.components.AffixFuzzer15"),
                )?
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok(
            crate::testing::datatypes::AffixFuzzer3::<'s>::try_from_arrow_opt(data)
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.testing.components.AffixFuzzer15#single_optional_union".into(),
                    source: Box::new(err),
                })?
                .into_iter()
                .map(Ok)
                .map(|res| res.map(|v| Some(Self(v))))
                .collect::<crate::DeserializationResult<Vec<Option<_>>>>()
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.testing.components.AffixFuzzer15#single_optional_union".into(),
                    source: Box::new(err),
                })?,
        )
    }

    #[inline]
    fn try_iter_from_arrow(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Self::Iter<'_>>
    where
        Self: Sized,
    {
        Ok(Box::new(Self::try_from_arrow_opt(data)?.into_iter()))
    }

    #[inline]
    fn convert_item_to_self(item: Self::Item<'_>) -> Option<Self> {
        item
    }
}

impl<'s> crate::Component<'s> for AffixFuzzer15<'s> {}

#[derive(Clone, Debug, PartialEq)]
pub struct AffixFuzzer16<'s>(pub Vec<crate::testing::datatypes::AffixFuzzer3<'s>>);

impl<'s, I: Into<crate::testing::datatypes::AffixFuzzer3<'s>>, T: IntoIterator<Item = I>> From<T>
    for AffixFuzzer16<'s>
{
    fn from(v: T) -> Self {
        Self(v.into_iter().map(|v| v.into()).collect())
    }
}

impl<'s> From<AffixFuzzer16<'s>> for ::std::borrow::Cow<'s, AffixFuzzer16<'s>> {
    #[inline]
    fn from(value: AffixFuzzer16<'s>) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'s> From<&'s AffixFuzzer16<'s>> for ::std::borrow::Cow<'s, AffixFuzzer16<'s>> {
    #[inline]
    fn from(value: &'s AffixFuzzer16<'s>) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl<'s> crate::Loggable<'s> for AffixFuzzer16<'s> {
    type Name = crate::ComponentName;
    type Item<'a> = Option<Self>;
    type Iter<'a> = Box<dyn Iterator<Item = Self::Item<'a>> + 'a>;
    #[inline]
    fn name() -> Self::Name {
        "rerun.testing.components.AffixFuzzer16".into()
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::List(Box::new(Field {
            name: "item".to_owned(),
            data_type: <crate::testing::datatypes::AffixFuzzer3<'s>>::to_arrow_datatype(),
            is_nullable: false,
            metadata: [].into(),
        }))
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum.map(|datum| {
                        let Self(data0) = datum.into_owned();
                        data0
                    });
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                let data0_inner_data: Vec<_> = data0
                    .iter()
                    .flatten()
                    .flatten()
                    .cloned()
                    .map(Some)
                    .collect();
                let data0_inner_bitmap: Option<::arrow2::bitmap::Bitmap> = None;
                let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                    data0
                        .iter()
                        .map(|opt| opt.as_ref().map(|datum| datum.len()).unwrap_or_default()),
                )
                .unwrap()
                .into();
                ListArray :: new ({ _ = extension_wrapper ; DataType :: Extension ("rerun.testing.components.AffixFuzzer16" . to_owned () , Box :: new (DataType :: List (Box :: new (Field { name : "item" . to_owned () , data_type : < crate :: testing :: datatypes :: AffixFuzzer3 :: < 's > > :: to_arrow_datatype () , is_nullable : false , metadata : [] . into () , }

))) , None) . to_logical_type () . clone () }

 , offsets , { _ = data0_inner_bitmap ; _ = extension_wrapper ; crate :: testing :: datatypes :: AffixFuzzer3 :: < 's > :: try_to_arrow_opt (data0_inner_data , Some ("rerun.testing.components.AffixFuzzer16")) ? }

 , data0_bitmap ,) . boxed ()
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let data = data
                .as_any()
                .downcast_ref::<::arrow2::array::ListArray<i32>>()
                .unwrap();
            if data.is_empty() {
                Vec::new()
            } else {
                let bitmap = data.validity().cloned();
                let offsets = {
                    let offsets = data.offsets();
                    offsets.iter().copied().zip(offsets.iter().copied().skip(1))
                };
                let data = &**data.values();
                let data = crate::testing::datatypes::AffixFuzzer3::<'s>::try_from_arrow_opt(data)
                    .map_err(|err| crate::DeserializationError::Context {
                        location: "rerun.testing.components.AffixFuzzer16#many_required_unions"
                            .into(),
                        source: Box::new(err),
                    })?
                    .into_iter()
                    .map(|v| {
                        v.ok_or_else(|| crate::DeserializationError::MissingData {
                            backtrace: ::backtrace::Backtrace::new_unresolved(),
                        })
                    })
                    .collect::<crate::DeserializationResult<Vec<_>>>()?;
                offsets
                    .enumerate()
                    .map(move |(i, (start, end))| {
                        bitmap
                            .as_ref()
                            .map_or(true, |bitmap| bitmap.get_bit(i))
                            .then(|| {
                                Ok(data
                                    .get(start as usize..end as usize)
                                    .ok_or(crate::DeserializationError::OffsetsMismatch {
                                        bounds: (start as usize, end as usize),
                                        len: data.len(),
                                        backtrace: ::backtrace::Backtrace::new_unresolved(),
                                    })?
                                    .to_vec())
                            })
                            .transpose()
                    })
                    .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?
            }
            .into_iter()
        }
        .map(|v| {
            v.ok_or_else(|| crate::DeserializationError::MissingData {
                backtrace: ::backtrace::Backtrace::new_unresolved(),
            })
        })
        .map(|res| res.map(|v| Some(Self(v))))
        .collect::<crate::DeserializationResult<Vec<Option<_>>>>()
        .map_err(|err| crate::DeserializationError::Context {
            location: "rerun.testing.components.AffixFuzzer16#many_required_unions".into(),
            source: Box::new(err),
        })?)
    }

    #[inline]
    fn try_iter_from_arrow(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Self::Iter<'_>>
    where
        Self: Sized,
    {
        Ok(Box::new(Self::try_from_arrow_opt(data)?.into_iter()))
    }

    #[inline]
    fn convert_item_to_self(item: Self::Item<'_>) -> Option<Self> {
        item
    }
}

impl<'s> crate::Component<'s> for AffixFuzzer16<'s> {}

#[derive(Clone, Debug, PartialEq)]
pub struct AffixFuzzer17<'s>(pub Option<Vec<crate::testing::datatypes::AffixFuzzer3<'s>>>);

impl<'s, I: Into<crate::testing::datatypes::AffixFuzzer3<'s>>, T: IntoIterator<Item = I>>
    From<Option<T>> for AffixFuzzer17<'s>
{
    fn from(v: Option<T>) -> Self {
        Self(v.map(|v| v.into_iter().map(|v| v.into()).collect()))
    }
}

impl<'s> From<AffixFuzzer17<'s>> for ::std::borrow::Cow<'s, AffixFuzzer17<'s>> {
    #[inline]
    fn from(value: AffixFuzzer17<'s>) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'s> From<&'s AffixFuzzer17<'s>> for ::std::borrow::Cow<'s, AffixFuzzer17<'s>> {
    #[inline]
    fn from(value: &'s AffixFuzzer17<'s>) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl<'s> crate::Loggable<'s> for AffixFuzzer17<'s> {
    type Name = crate::ComponentName;
    type Item<'a> = Option<Self>;
    type Iter<'a> = Box<dyn Iterator<Item = Self::Item<'a>> + 'a>;
    #[inline]
    fn name() -> Self::Name {
        "rerun.testing.components.AffixFuzzer17".into()
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::List(Box::new(Field {
            name: "item".to_owned(),
            data_type: <crate::testing::datatypes::AffixFuzzer3<'s>>::to_arrow_datatype(),
            is_nullable: true,
            metadata: [].into(),
        }))
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum
                        .map(|datum| {
                            let Self(data0) = datum.into_owned();
                            data0
                        })
                        .flatten();
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                let data0_inner_data: Vec<_> = data0
                    .iter()
                    .flatten()
                    .flatten()
                    .cloned()
                    .map(Some)
                    .collect();
                let data0_inner_bitmap: Option<::arrow2::bitmap::Bitmap> = None;
                let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                    data0
                        .iter()
                        .map(|opt| opt.as_ref().map(|datum| datum.len()).unwrap_or_default()),
                )
                .unwrap()
                .into();
                ListArray :: new ({ _ = extension_wrapper ; DataType :: Extension ("rerun.testing.components.AffixFuzzer17" . to_owned () , Box :: new (DataType :: List (Box :: new (Field { name : "item" . to_owned () , data_type : < crate :: testing :: datatypes :: AffixFuzzer3 :: < 's > > :: to_arrow_datatype () , is_nullable : true , metadata : [] . into () , }

))) , None) . to_logical_type () . clone () }

 , offsets , { _ = data0_inner_bitmap ; _ = extension_wrapper ; crate :: testing :: datatypes :: AffixFuzzer3 :: < 's > :: try_to_arrow_opt (data0_inner_data , Some ("rerun.testing.components.AffixFuzzer17")) ? }

 , data0_bitmap ,) . boxed ()
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let data = data
                .as_any()
                .downcast_ref::<::arrow2::array::ListArray<i32>>()
                .unwrap();
            if data.is_empty() {
                Vec::new()
            } else {
                let bitmap = data.validity().cloned();
                let offsets = {
                    let offsets = data.offsets();
                    offsets.iter().copied().zip(offsets.iter().copied().skip(1))
                };
                let data = &**data.values();
                let data = crate::testing::datatypes::AffixFuzzer3::<'s>::try_from_arrow_opt(data)
                    .map_err(|err| crate::DeserializationError::Context {
                        location: "rerun.testing.components.AffixFuzzer17#many_optional_unions"
                            .into(),
                        source: Box::new(err),
                    })?
                    .into_iter()
                    .map(|v| {
                        v.ok_or_else(|| crate::DeserializationError::MissingData {
                            backtrace: ::backtrace::Backtrace::new_unresolved(),
                        })
                    })
                    .collect::<crate::DeserializationResult<Vec<_>>>()?;
                offsets
                    .enumerate()
                    .map(move |(i, (start, end))| {
                        bitmap
                            .as_ref()
                            .map_or(true, |bitmap| bitmap.get_bit(i))
                            .then(|| {
                                Ok(data
                                    .get(start as usize..end as usize)
                                    .ok_or(crate::DeserializationError::OffsetsMismatch {
                                        bounds: (start as usize, end as usize),
                                        len: data.len(),
                                        backtrace: ::backtrace::Backtrace::new_unresolved(),
                                    })?
                                    .to_vec())
                            })
                            .transpose()
                    })
                    .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?
            }
            .into_iter()
        }
        .map(Ok)
        .map(|res| res.map(|v| Some(Self(v))))
        .collect::<crate::DeserializationResult<Vec<Option<_>>>>()
        .map_err(|err| crate::DeserializationError::Context {
            location: "rerun.testing.components.AffixFuzzer17#many_optional_unions".into(),
            source: Box::new(err),
        })?)
    }

    #[inline]
    fn try_iter_from_arrow(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Self::Iter<'_>>
    where
        Self: Sized,
    {
        Ok(Box::new(Self::try_from_arrow_opt(data)?.into_iter()))
    }

    #[inline]
    fn convert_item_to_self(item: Self::Item<'_>) -> Option<Self> {
        item
    }
}

impl<'s> crate::Component<'s> for AffixFuzzer17<'s> {}

#[derive(Clone, Debug, PartialEq)]
pub struct AffixFuzzer18<'s>(pub Option<Vec<crate::testing::datatypes::AffixFuzzer4<'s>>>);

impl<'s, I: Into<crate::testing::datatypes::AffixFuzzer4<'s>>, T: IntoIterator<Item = I>>
    From<Option<T>> for AffixFuzzer18<'s>
{
    fn from(v: Option<T>) -> Self {
        Self(v.map(|v| v.into_iter().map(|v| v.into()).collect()))
    }
}

impl<'s> From<AffixFuzzer18<'s>> for ::std::borrow::Cow<'s, AffixFuzzer18<'s>> {
    #[inline]
    fn from(value: AffixFuzzer18<'s>) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'s> From<&'s AffixFuzzer18<'s>> for ::std::borrow::Cow<'s, AffixFuzzer18<'s>> {
    #[inline]
    fn from(value: &'s AffixFuzzer18<'s>) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl<'s> crate::Loggable<'s> for AffixFuzzer18<'s> {
    type Name = crate::ComponentName;
    type Item<'a> = Option<Self>;
    type Iter<'a> = Box<dyn Iterator<Item = Self::Item<'a>> + 'a>;
    #[inline]
    fn name() -> Self::Name {
        "rerun.testing.components.AffixFuzzer18".into()
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::List(Box::new(Field {
            name: "item".to_owned(),
            data_type: <crate::testing::datatypes::AffixFuzzer4<'s>>::to_arrow_datatype(),
            is_nullable: true,
            metadata: [].into(),
        }))
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum
                        .map(|datum| {
                            let Self(data0) = datum.into_owned();
                            data0
                        })
                        .flatten();
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                let data0_inner_data: Vec<_> = data0
                    .iter()
                    .flatten()
                    .flatten()
                    .cloned()
                    .map(Some)
                    .collect();
                let data0_inner_bitmap: Option<::arrow2::bitmap::Bitmap> = None;
                let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                    data0
                        .iter()
                        .map(|opt| opt.as_ref().map(|datum| datum.len()).unwrap_or_default()),
                )
                .unwrap()
                .into();
                ListArray :: new ({ _ = extension_wrapper ; DataType :: Extension ("rerun.testing.components.AffixFuzzer18" . to_owned () , Box :: new (DataType :: List (Box :: new (Field { name : "item" . to_owned () , data_type : < crate :: testing :: datatypes :: AffixFuzzer4 :: < 's > > :: to_arrow_datatype () , is_nullable : true , metadata : [] . into () , }

))) , None) . to_logical_type () . clone () }

 , offsets , { _ = data0_inner_bitmap ; _ = extension_wrapper ; crate :: testing :: datatypes :: AffixFuzzer4 :: < 's > :: try_to_arrow_opt (data0_inner_data , Some ("rerun.testing.components.AffixFuzzer18")) ? }

 , data0_bitmap ,) . boxed ()
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let data = data
                .as_any()
                .downcast_ref::<::arrow2::array::ListArray<i32>>()
                .unwrap();
            if data.is_empty() {
                Vec::new()
            } else {
                let bitmap = data.validity().cloned();
                let offsets = {
                    let offsets = data.offsets();
                    offsets.iter().copied().zip(offsets.iter().copied().skip(1))
                };
                let data = &**data.values();
                let data = crate::testing::datatypes::AffixFuzzer4::<'s>::try_from_arrow_opt(data)
                    .map_err(|err| crate::DeserializationError::Context {
                        location: "rerun.testing.components.AffixFuzzer18#many_optional_unions"
                            .into(),
                        source: Box::new(err),
                    })?
                    .into_iter()
                    .map(|v| {
                        v.ok_or_else(|| crate::DeserializationError::MissingData {
                            backtrace: ::backtrace::Backtrace::new_unresolved(),
                        })
                    })
                    .collect::<crate::DeserializationResult<Vec<_>>>()?;
                offsets
                    .enumerate()
                    .map(move |(i, (start, end))| {
                        bitmap
                            .as_ref()
                            .map_or(true, |bitmap| bitmap.get_bit(i))
                            .then(|| {
                                Ok(data
                                    .get(start as usize..end as usize)
                                    .ok_or(crate::DeserializationError::OffsetsMismatch {
                                        bounds: (start as usize, end as usize),
                                        len: data.len(),
                                        backtrace: ::backtrace::Backtrace::new_unresolved(),
                                    })?
                                    .to_vec())
                            })
                            .transpose()
                    })
                    .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?
            }
            .into_iter()
        }
        .map(Ok)
        .map(|res| res.map(|v| Some(Self(v))))
        .collect::<crate::DeserializationResult<Vec<Option<_>>>>()
        .map_err(|err| crate::DeserializationError::Context {
            location: "rerun.testing.components.AffixFuzzer18#many_optional_unions".into(),
            source: Box::new(err),
        })?)
    }

    #[inline]
    fn try_iter_from_arrow(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Self::Iter<'_>>
    where
        Self: Sized,
    {
        Ok(Box::new(Self::try_from_arrow_opt(data)?.into_iter()))
    }

    #[inline]
    fn convert_item_to_self(item: Self::Item<'_>) -> Option<Self> {
        item
    }
}

impl<'s> crate::Component<'s> for AffixFuzzer18<'s> {}

#[derive(Clone, Debug, PartialEq)]
pub struct AffixFuzzer19<'s>(pub crate::testing::datatypes::AffixFuzzer5<'s>);

impl<'s, T: Into<crate::testing::datatypes::AffixFuzzer5<'s>>> From<T> for AffixFuzzer19<'s> {
    fn from(v: T) -> Self {
        Self(v.into())
    }
}

impl<'s> From<AffixFuzzer19<'s>> for ::std::borrow::Cow<'s, AffixFuzzer19<'s>> {
    #[inline]
    fn from(value: AffixFuzzer19<'s>) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'s> From<&'s AffixFuzzer19<'s>> for ::std::borrow::Cow<'s, AffixFuzzer19<'s>> {
    #[inline]
    fn from(value: &'s AffixFuzzer19<'s>) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl<'s> crate::Loggable<'s> for AffixFuzzer19<'s> {
    type Name = crate::ComponentName;
    type Item<'a> = Option<Self>;
    type Iter<'a> = Box<dyn Iterator<Item = Self::Item<'a>> + 'a>;
    #[inline]
    fn name() -> Self::Name {
        "rerun.testing.components.AffixFuzzer19".into()
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Struct(vec![Field {
            name: "single_optional_union".to_owned(),
            data_type: <crate::testing::datatypes::AffixFuzzer4<'s>>::to_arrow_datatype(),
            is_nullable: true,
            metadata: [].into(),
        }])
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum.map(|datum| {
                        let Self(data0) = datum.into_owned();
                        data0
                    });
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                _ = data0_bitmap;
                _ = extension_wrapper;
                crate::testing::datatypes::AffixFuzzer5::<'s>::try_to_arrow_opt(
                    data0,
                    Some("rerun.testing.components.AffixFuzzer19"),
                )?
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok(
            crate::testing::datatypes::AffixFuzzer5::<'s>::try_from_arrow_opt(data)
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.testing.components.AffixFuzzer19#just_a_table_nothing_shady"
                        .into(),
                    source: Box::new(err),
                })?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        backtrace: ::backtrace::Backtrace::new_unresolved(),
                    })
                })
                .map(|res| res.map(|v| Some(Self(v))))
                .collect::<crate::DeserializationResult<Vec<Option<_>>>>()
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.testing.components.AffixFuzzer19#just_a_table_nothing_shady"
                        .into(),
                    source: Box::new(err),
                })?,
        )
    }

    #[inline]
    fn try_iter_from_arrow(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Self::Iter<'_>>
    where
        Self: Sized,
    {
        Ok(Box::new(Self::try_from_arrow_opt(data)?.into_iter()))
    }

    #[inline]
    fn convert_item_to_self(item: Self::Item<'_>) -> Option<Self> {
        item
    }
}

impl<'s> crate::Component<'s> for AffixFuzzer19<'s> {}

#[derive(Clone, Debug, Eq, PartialEq)]
pub struct AffixFuzzer20<'s>(pub crate::testing::datatypes::AffixFuzzer20<'s>);

impl<'s, T: Into<crate::testing::datatypes::AffixFuzzer20<'s>>> From<T> for AffixFuzzer20<'s> {
    fn from(v: T) -> Self {
        Self(v.into())
    }
}

impl<'s> From<AffixFuzzer20<'s>> for ::std::borrow::Cow<'s, AffixFuzzer20<'s>> {
    #[inline]
    fn from(value: AffixFuzzer20<'s>) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'s> From<&'s AffixFuzzer20<'s>> for ::std::borrow::Cow<'s, AffixFuzzer20<'s>> {
    #[inline]
    fn from(value: &'s AffixFuzzer20<'s>) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl<'s> crate::Loggable<'s> for AffixFuzzer20<'s> {
    type Name = crate::ComponentName;
    type Item<'a> = Option<Self>;
    type Iter<'a> = Box<dyn Iterator<Item = Self::Item<'a>> + 'a>;
    #[inline]
    fn name() -> Self::Name {
        "rerun.testing.components.AffixFuzzer20".into()
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Struct(vec![
            Field {
                name: "p".to_owned(),
                data_type: <crate::testing::components::PrimitiveComponent>::to_arrow_datatype(),
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "s".to_owned(),
                data_type: <crate::testing::components::StringComponent<'s>>::to_arrow_datatype(),
                is_nullable: false,
                metadata: [].into(),
            },
        ])
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum.map(|datum| {
                        let Self(data0) = datum.into_owned();
                        data0
                    });
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                _ = data0_bitmap;
                _ = extension_wrapper;
                crate::testing::datatypes::AffixFuzzer20::<'s>::try_to_arrow_opt(
                    data0,
                    Some("rerun.testing.components.AffixFuzzer20"),
                )?
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok(
            crate::testing::datatypes::AffixFuzzer20::<'s>::try_from_arrow_opt(data)
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.testing.components.AffixFuzzer20#nested_transparent".into(),
                    source: Box::new(err),
                })?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        backtrace: ::backtrace::Backtrace::new_unresolved(),
                    })
                })
                .map(|res| res.map(|v| Some(Self(v))))
                .collect::<crate::DeserializationResult<Vec<Option<_>>>>()
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.testing.components.AffixFuzzer20#nested_transparent".into(),
                    source: Box::new(err),
                })?,
        )
    }

    #[inline]
    fn try_iter_from_arrow(
        data: &'s dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Self::Iter<'_>>
    where
        Self: Sized,
    {
        Ok(Box::new(Self::try_from_arrow_opt(data)?.into_iter()))
    }

    #[inline]
    fn convert_item_to_self(item: Self::Item<'_>) -> Option<Self> {
        item
    }
}

impl<'s> crate::Component<'s> for AffixFuzzer20<'s> {}
