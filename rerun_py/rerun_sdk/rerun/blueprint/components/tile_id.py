# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python.rs
# Based on "crates/re_types/definitions/rerun/blueprint/components/tile_id.fbs".

# You can extend this class by creating a "TileIdExt" class in "tile_id_ext.py".

from __future__ import annotations

from typing import Any, Sequence, Union

import numpy as np
import numpy.typing as npt
import pyarrow as pa
from attrs import define, field

from ..._baseclasses import BaseBatch, BaseExtensionType, ComponentBatchMixin
from ..._converters import (
    to_np_uint8,
)

__all__ = ["TileId", "TileIdArrayLike", "TileIdBatch", "TileIdLike", "TileIdType"]


@define(init=False)
class TileId:
    """
    **Component**: An opaque `egui_tiles::TileId`.

    Unstable. Used for the ongoing blueprint experimentations.
    """

    def __init__(self: Any, tile_id: TileIdLike):
        """Create a new instance of the TileId component."""

        # You can define your own __init__ function as a member of TileIdExt in tile_id_ext.py
        self.__attrs_init__(tile_id=tile_id)

    tile_id: npt.NDArray[np.uint8] = field(converter=to_np_uint8)

    def __array__(self, dtype: npt.DTypeLike = None) -> npt.NDArray[Any]:
        # You can define your own __array__ function as a member of TileIdExt in tile_id_ext.py
        return np.asarray(self.tile_id, dtype=dtype)


TileIdLike = TileId
TileIdArrayLike = Union[
    TileId,
    Sequence[TileIdLike],
]


class TileIdType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.blueprint.components.TileId"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self, pa.list_(pa.field("item", pa.uint8(), nullable=False, metadata={})), self._TYPE_NAME
        )


class TileIdBatch(BaseBatch[TileIdArrayLike], ComponentBatchMixin):
    _ARROW_TYPE = TileIdType()

    @staticmethod
    def _native_to_pa_array(data: TileIdArrayLike, data_type: pa.DataType) -> pa.Array:
        raise NotImplementedError  # You need to implement native_to_pa_array_override in tile_id_ext.py
