// NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.
// Based on "crates/re_types/definitions/rerun/components/rect2d.fbs"

#pragma once

#include <arrow/type_fwd.h>
#include <cstdint>
#include <cstring>
#include <utility>

namespace rerun {
    namespace components {
        namespace detail {
            enum class Rect2DFormatTag : uint8_t {
                /// Having a special empty state makes it possible to implement move-semantics. We
                /// need to be able to leave the object in a state which we can run the destructor
                /// on.
                NONE = 0,
            };

            union Rect2DFormatData {
                Rect2DFormatData() {}

                ~Rect2DFormatData() {}

                void swap(Rect2DFormatData& other) noexcept {
                    // This bitwise swap would fail for self-referential types, but we don't have
                    // any of those.
                    char temp[sizeof(Rect2DFormatData)];
                    std::memcpy(temp, this, sizeof(Rect2DFormatData));
                    std::memcpy(this, &other, sizeof(Rect2DFormatData));
                    std::memcpy(&other, temp, sizeof(Rect2DFormatData));
                }
            };
        } // namespace detail

        struct Rect2DFormat {
            /// Name of the component, used for serialization.
            static const char* NAME;

            Rect2DFormat() : _tag(detail::Rect2DFormatTag::NONE) {}

            Rect2DFormat(const Rect2DFormat& other) : _tag(other._tag) {
                memcpy(&this->_data, &other._data, sizeof(detail::Rect2DFormatData));
            }

            Rect2DFormat& operator=(const Rect2DFormat& other) noexcept {
                Rect2DFormat tmp(other);
                this->swap(tmp);
                return *this;
            }

            Rect2DFormat(Rect2DFormat&& other) noexcept : _tag(detail::Rect2DFormatTag::NONE) {
                this->swap(other);
            }

            Rect2DFormat& operator=(Rect2DFormat&& other) noexcept {
                this->swap(other);
                return *this;
            }

            void swap(Rect2DFormat& other) noexcept {
                auto tag_temp = this->_tag;
                this->_tag = other._tag;
                other._tag = tag_temp;
                this->_data.swap(other._data);
            }

            /// Returns the arrow data type this type corresponds to.
            static const std::shared_ptr<arrow::DataType>& to_arrow_datatype();

            /// Creates a new array builder with an array of this type.
            static arrow::Result<std::shared_ptr<arrow::DenseUnionBuilder>> new_arrow_array_builder(
                arrow::MemoryPool* memory_pool
            );

            /// Fills an arrow array builder with an array of this type.
            static arrow::Status fill_arrow_array_builder(
                arrow::DenseUnionBuilder* builder, const Rect2DFormat* elements, size_t num_elements
            );

          private:
            detail::Rect2DFormatTag _tag;
            detail::Rect2DFormatData _data;
        };
    } // namespace components
} // namespace rerun
