# DO NOT EDIT!: This file was auto-generated by crates/re_types_builder/src/codegen/python.rs:277.

from __future__ import annotations

from typing import Sequence, Union

import pyarrow as pa
from attrs import define, field

from .._baseclasses import (
    BaseExtensionArray,
    BaseExtensionType,
)

__all__ = [
    "AffixFuzzer1Indicator",
    "AffixFuzzer1IndicatorArray",
    "AffixFuzzer1IndicatorArrayLike",
    "AffixFuzzer1IndicatorLike",
    "AffixFuzzer1IndicatorType",
]


@define
class AffixFuzzer1Indicator:
    """
    Indicator component for the `rerun.components.AffixFuzzer1Indicator` archetype.

    Indicator components are data-less components used to give some extra context.
    The Rerun Viewer can make use of them to provide better heuristics and even improve performance
    in some cases.
    """

    AffixFuzzer1Indicator: () = field(converter=())


AffixFuzzer1IndicatorLike = AffixFuzzer1Indicator
AffixFuzzer1IndicatorArrayLike = Union[
    AffixFuzzer1Indicator,
    Sequence[AffixFuzzer1IndicatorLike],
]


# --- Arrow support ---


class AffixFuzzer1IndicatorType(BaseExtensionType):
    def __init__(self) -> None:
        pa.ExtensionType.__init__(self, pa.null(), "rerun.components.AffixFuzzer1Indicator")


class AffixFuzzer1IndicatorArray(BaseExtensionArray[AffixFuzzer1IndicatorArrayLike]):
    _EXTENSION_NAME = "rerun.components.AffixFuzzer1Indicator"
    _EXTENSION_TYPE = AffixFuzzer1IndicatorType

    @staticmethod
    def _native_to_pa_array(data: AffixFuzzer1IndicatorArrayLike, data_type: pa.DataType) -> pa.Array:
        raise NotImplementedError  # You need to implement "affixfuzzer1indicator_native_to_pa_array" in rerun_py/rerun_sdk/rerun/_rerun2/components/_overrides/affix_fuzzer1indicator.py


AffixFuzzer1IndicatorType._ARRAY_TYPE = AffixFuzzer1IndicatorArray

# TODO(cmc): bring back registration to pyarrow once legacy types are gone
# pa.register_extension_type(AffixFuzzer1IndicatorType())
