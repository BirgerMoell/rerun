# DO NOT EDIT!: This file was auto-generated by crates/re_types_builder/src/codegen/python.rs:277.

from __future__ import annotations

from typing import Sequence, Union

import pyarrow as pa
from attrs import define, field

from .._baseclasses import (
    BaseExtensionArray,
    BaseExtensionType,
)

__all__ = [
    "TensorIndicator",
    "TensorIndicatorArray",
    "TensorIndicatorArrayLike",
    "TensorIndicatorLike",
    "TensorIndicatorType",
]


@define
class TensorIndicator:
    """
    Indicator component for the `rerun.components.TensorIndicator` archetype.

    Indicator components are data-less components used to give some extra context.
    The Rerun Viewer can make use of them to provide better heuristics and even improve performance
    in some cases.
    """

    TensorIndicator: () = field(converter=())


TensorIndicatorLike = TensorIndicator
TensorIndicatorArrayLike = Union[
    TensorIndicator,
    Sequence[TensorIndicatorLike],
]


# --- Arrow support ---


class TensorIndicatorType(BaseExtensionType):
    def __init__(self) -> None:
        pa.ExtensionType.__init__(self, pa.null(), "rerun.components.TensorIndicator")


class TensorIndicatorArray(BaseExtensionArray[TensorIndicatorArrayLike]):
    _EXTENSION_NAME = "rerun.components.TensorIndicator"
    _EXTENSION_TYPE = TensorIndicatorType

    @staticmethod
    def _native_to_pa_array(data: TensorIndicatorArrayLike, data_type: pa.DataType) -> pa.Array:
        raise NotImplementedError  # You need to implement "tensorindicator_native_to_pa_array" in rerun_py/rerun_sdk/rerun/_rerun2/components/_overrides/tensor_indicator.py


TensorIndicatorType._ARRAY_TYPE = TensorIndicatorArray

# TODO(cmc): bring back registration to pyarrow once legacy types are gone
# pa.register_extension_type(TensorIndicatorType())
