# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python.rs
# Based on "crates/re_types/definitions/rerun/blueprint/datatypes/query_expressions.fbs".

# You can extend this class by creating a "QueryExpressionsExt" class in "query_expressions_ext.py".

from __future__ import annotations

from typing import Any, Sequence, Union

import pyarrow as pa
from attrs import define, field

from ..._baseclasses import BaseBatch, BaseExtensionType

__all__ = [
    "QueryExpressions",
    "QueryExpressionsArrayLike",
    "QueryExpressionsBatch",
    "QueryExpressionsLike",
    "QueryExpressionsType",
]


@define(init=False)
class QueryExpressions:
    """
    **Datatype**: A set of expressions used for a `DataQueryBlueprint`.

    Unstable. Used for the ongoing blueprint experimentations.
    """

    def __init__(self: Any, inclusions: list[str], exclusions: list[str]):
        """
        Create a new instance of the QueryExpressions datatype.

        Parameters
        ----------
        inclusions:
            A set of strings representing `EntityPathExpression`s to be included.
        exclusions:
            A set of strings representing `EntityPathExpression`s to be excluded.
        """

        # You can define your own __init__ function as a member of QueryExpressionsExt in query_expressions_ext.py
        self.__attrs_init__(inclusions=inclusions, exclusions=exclusions)

    inclusions: list[str] = field()
    # A set of strings representing `EntityPathExpression`s to be included.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    exclusions: list[str] = field()
    # A set of strings representing `EntityPathExpression`s to be excluded.
    #
    # (Docstring intentionally commented out to hide this field from the docs)


QueryExpressionsLike = QueryExpressions
QueryExpressionsArrayLike = Union[
    QueryExpressions,
    Sequence[QueryExpressionsLike],
]


class QueryExpressionsType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.blueprint.datatypes.QueryExpressions"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.struct(
                [
                    pa.field(
                        "inclusions",
                        pa.list_(pa.field("item", pa.utf8(), nullable=False, metadata={})),
                        nullable=False,
                        metadata={},
                    ),
                    pa.field(
                        "exclusions",
                        pa.list_(pa.field("item", pa.utf8(), nullable=False, metadata={})),
                        nullable=False,
                        metadata={},
                    ),
                ]
            ),
            self._TYPE_NAME,
        )


class QueryExpressionsBatch(BaseBatch[QueryExpressionsArrayLike]):
    _ARROW_TYPE = QueryExpressionsType()

    @staticmethod
    def _native_to_pa_array(data: QueryExpressionsArrayLike, data_type: pa.DataType) -> pa.Array:
        raise NotImplementedError  # You need to implement native_to_pa_array_override in query_expressions_ext.py
