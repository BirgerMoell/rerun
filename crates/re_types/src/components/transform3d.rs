// NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.

#![allow(trivial_numeric_casts)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::iter_on_single_items)]
#![allow(clippy::map_flatten)]
#![allow(clippy::match_wildcard_for_single_variants)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]
#![allow(clippy::unnecessary_cast)]

/// An affine transform between two 3D spaces, represented in a given direction.
#[derive(Clone, Debug, PartialEq)]
pub struct Transform3D(
    /// Representation of the transform.
    pub crate::datatypes::Transform3D,
);

impl<'a> From<Transform3D> for ::std::borrow::Cow<'a, Transform3D> {
    #[inline]
    fn from(value: Transform3D) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'a> From<&'a Transform3D> for ::std::borrow::Cow<'a, Transform3D> {
    #[inline]
    fn from(value: &'a Transform3D) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl crate::Loggable for Transform3D {
    type Name = crate::ComponentName;
    #[inline]
    fn name() -> Self::Name {
        "rerun.components.Transform3D".into()
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Union(
            vec![
                Field {
                    name: "_null_markers".to_owned(),
                    data_type: DataType::Null,
                    is_nullable: true,
                    metadata: [].into(),
                },
                Field {
                    name: "TranslationAndMat3x3".to_owned(),
                    data_type: <crate::datatypes::TranslationAndMat3x3>::to_arrow_datatype(),
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "TranslationRotationScale".to_owned(),
                    data_type: <crate::datatypes::TranslationRotationScale3D>::to_arrow_datatype(),
                    is_nullable: false,
                    metadata: [].into(),
                },
            ],
            Some(vec![0i32, 1i32, 2i32]),
            UnionMode::Dense,
        )
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum.map(|datum| {
                        let Self(data0) = datum.into_owned();
                        data0
                    });
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                _ = data0_bitmap;
                _ = extension_wrapper;
                crate::datatypes::Transform3D::try_to_arrow_opt(
                    data0,
                    Some("rerun.components.Transform3D"),
                )?
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok ({ use :: arrow2 :: { datatypes :: * , array :: * }

 ; use crate :: datatypes :: * ; use crate :: Loggable as _ ; Ok ({ let data = data . as_any () . downcast_ref :: < :: arrow2 :: array :: UnionArray > () . ok_or_else (|| crate :: DeserializationError :: DatatypeMismatch { expected : data . data_type () . clone () , got : data . data_type () . clone () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.Transform3D" . into () , source : Box :: new (err) , }

) ? ; if data . is_empty () { Vec :: new () }

 else { let (data_types , data_arrays , data_offsets) = (data . types () , data . fields () , data . offsets () . unwrap ()) ; let translation_and_mat_3_x_3 = { let data = & * data_arrays [1usize];

 { use :: arrow2 :: { datatypes :: * , array :: * }

 ; use crate :: datatypes :: * ; use crate :: Loggable as _ ; Ok ({ let data = data . as_any () . downcast_ref :: < :: arrow2 :: array :: StructArray > () . ok_or_else (|| crate :: DeserializationError :: DatatypeMismatch { expected : data . data_type () . clone () , got : data . data_type () . clone () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.TranslationAndMat3x3" . into () , source : Box :: new (err) , }

) ? ; if data . is_empty () { Vec :: new () }

 else { let (data_fields , data_arrays , data_bitmap) = (data . fields () , data . values () , data . validity ()) ; let is_valid = | i | data_bitmap . map_or (true , | bitmap | bitmap . get_bit (i)) ; let arrays_by_name : :: std :: collections :: HashMap < _ , _ > = data_fields . iter () . map (| field | field . name . as_str ()) . zip (data_arrays) . collect () ; let translation = { let data = & * * arrays_by_name ["translation"];

 { let data = data . as_any () . downcast_ref :: < :: arrow2 :: array :: FixedSizeListArray > () . unwrap () ; if data . is_empty () { Vec :: new () }

 else { let bitmap = data . validity () . cloned () ; let offsets = (0 ..) . step_by (3usize) . zip ((3usize ..) . step_by (3usize) . take (data . len ())) ; let data = & * * data . values () ; let data = data . as_any () . downcast_ref :: < Float32Array > () . unwrap () . into_iter () . map (| v | v . copied ()) . map (| v | v . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

)) . collect :: < crate :: DeserializationResult < Vec < _ >> > () ? ; offsets . enumerate () . map (move | (i , (start , end)) | bitmap . as_ref () . map_or (true , | bitmap | bitmap . get_bit (i)) . then (|| { data . get (start as usize .. end as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (start as usize , end as usize) , len : data . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) ? . to_vec () . try_into () . map_err (| _err | crate :: DeserializationError :: ArrayLengthMismatch { expected : 3usize , got : (end - start) as usize , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) }

) . transpose ()) . map (| res | res . map (| opt | opt . map (| v | crate :: datatypes :: Vec3D (v)))) . collect :: < crate :: DeserializationResult < Vec < Option < _ >> >> () ? }

 . into_iter () }

 }

 ; let matrix = { let data = & * * arrays_by_name ["matrix"];

 { let data = data . as_any () . downcast_ref :: < :: arrow2 :: array :: FixedSizeListArray > () . unwrap () ; if data . is_empty () { Vec :: new () }

 else { let bitmap = data . validity () . cloned () ; let offsets = (0 ..) . step_by (9usize) . zip ((9usize ..) . step_by (9usize) . take (data . len ())) ; let data = & * * data . values () ; let data = data . as_any () . downcast_ref :: < Float32Array > () . unwrap () . into_iter () . map (| v | v . copied ()) . map (| v | v . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

)) . collect :: < crate :: DeserializationResult < Vec < _ >> > () ? ; offsets . enumerate () . map (move | (i , (start , end)) | bitmap . as_ref () . map_or (true , | bitmap | bitmap . get_bit (i)) . then (|| { data . get (start as usize .. end as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (start as usize , end as usize) , len : data . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) ? . to_vec () . try_into () . map_err (| _err | crate :: DeserializationError :: ArrayLengthMismatch { expected : 9usize , got : (end - start) as usize , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) }

) . transpose ()) . map (| res | res . map (| opt | opt . map (| v | crate :: datatypes :: Mat3x3 (v)))) . collect :: < crate :: DeserializationResult < Vec < Option < _ >> >> () ? }

 . into_iter () }

 }

 ; let from_parent = { let data = & * * arrays_by_name ["from_parent"];

 data . as_any () . downcast_ref :: < BooleanArray > () . unwrap () . into_iter () }

 ; :: itertools :: izip ! (translation , matrix , from_parent) . enumerate () . map (| (i , (translation , matrix , from_parent)) | is_valid (i) . then (|| Ok (crate :: datatypes :: TranslationAndMat3x3 { translation , matrix , from_parent : from_parent . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.TranslationAndMat3x3#from_parent" . into () , source : Box :: new (err) , }

) ? , }

)) . transpose ()) . collect :: < crate :: DeserializationResult < Vec < _ >> > () . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.TranslationAndMat3x3" . into () , source : Box :: new (err) , }

) ? }

 }

) ? . into_iter () }

 . collect :: < Vec < _ >> () }

 ; let translation_rotation_scale = { let data = & * data_arrays [2usize];

 { use :: arrow2 :: { datatypes :: * , array :: * }

 ; use crate :: datatypes :: * ; use crate :: Loggable as _ ; Ok ({ let data = data . as_any () . downcast_ref :: < :: arrow2 :: array :: StructArray > () . ok_or_else (|| crate :: DeserializationError :: DatatypeMismatch { expected : data . data_type () . clone () , got : data . data_type () . clone () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.TranslationRotationScale3D" . into () , source : Box :: new (err) , }

) ? ; if data . is_empty () { Vec :: new () }

 else { let (data_fields , data_arrays , data_bitmap) = (data . fields () , data . values () , data . validity ()) ; let is_valid = | i | data_bitmap . map_or (true , | bitmap | bitmap . get_bit (i)) ; let arrays_by_name : :: std :: collections :: HashMap < _ , _ > = data_fields . iter () . map (| field | field . name . as_str ()) . zip (data_arrays) . collect () ; let translation = { let data = & * * arrays_by_name ["translation"];

 { let data = data . as_any () . downcast_ref :: < :: arrow2 :: array :: FixedSizeListArray > () . unwrap () ; if data . is_empty () { Vec :: new () }

 else { let bitmap = data . validity () . cloned () ; let offsets = (0 ..) . step_by (3usize) . zip ((3usize ..) . step_by (3usize) . take (data . len ())) ; let data = & * * data . values () ; let data = data . as_any () . downcast_ref :: < Float32Array > () . unwrap () . into_iter () . map (| v | v . copied ()) . map (| v | v . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

)) . collect :: < crate :: DeserializationResult < Vec < _ >> > () ? ; offsets . enumerate () . map (move | (i , (start , end)) | bitmap . as_ref () . map_or (true , | bitmap | bitmap . get_bit (i)) . then (|| { data . get (start as usize .. end as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (start as usize , end as usize) , len : data . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) ? . to_vec () . try_into () . map_err (| _err | crate :: DeserializationError :: ArrayLengthMismatch { expected : 3usize , got : (end - start) as usize , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) }

) . transpose ()) . map (| res | res . map (| opt | opt . map (| v | crate :: datatypes :: Vec3D (v)))) . collect :: < crate :: DeserializationResult < Vec < Option < _ >> >> () ? }

 . into_iter () }

 }

 ; let rotation = { let data = & * * arrays_by_name ["rotation"];

 { use :: arrow2 :: { datatypes :: * , array :: * }

 ; use crate :: datatypes :: * ; use crate :: Loggable as _ ; Ok ({ let data = data . as_any () . downcast_ref :: < :: arrow2 :: array :: UnionArray > () . ok_or_else (|| crate :: DeserializationError :: DatatypeMismatch { expected : data . data_type () . clone () , got : data . data_type () . clone () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.Rotation3D" . into () , source : Box :: new (err) , }

) ? ; if data . is_empty () { Vec :: new () }

 else { let (data_types , data_arrays , data_offsets) = (data . types () , data . fields () , data . offsets () . unwrap ()) ; let quaternion = { let data = & * data_arrays [1usize];

 { let data = data . as_any () . downcast_ref :: < :: arrow2 :: array :: FixedSizeListArray > () . unwrap () ; if data . is_empty () { Vec :: new () }

 else { let bitmap = data . validity () . cloned () ; let offsets = (0 ..) . step_by (4usize) . zip ((4usize ..) . step_by (4usize) . take (data . len ())) ; let data = & * * data . values () ; let data = data . as_any () . downcast_ref :: < Float32Array > () . unwrap () . into_iter () . map (| v | v . copied ()) . map (| v | v . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

)) . collect :: < crate :: DeserializationResult < Vec < _ >> > () ? ; offsets . enumerate () . map (move | (i , (start , end)) | bitmap . as_ref () . map_or (true , | bitmap | bitmap . get_bit (i)) . then (|| { data . get (start as usize .. end as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (start as usize , end as usize) , len : data . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) ? . to_vec () . try_into () . map_err (| _err | crate :: DeserializationError :: ArrayLengthMismatch { expected : 4usize , got : (end - start) as usize , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) }

) . transpose ()) . map (| res | res . map (| opt | opt . map (| v | crate :: datatypes :: Quaternion (v)))) . collect :: < crate :: DeserializationResult < Vec < Option < _ >> >> () ? }

 . into_iter () }

 . collect :: < Vec < _ >> () }

 ; let axis_angle = { let data = & * data_arrays [2usize];

 { use :: arrow2 :: { datatypes :: * , array :: * }

 ; use crate :: datatypes :: * ; use crate :: Loggable as _ ; Ok ({ let data = data . as_any () . downcast_ref :: < :: arrow2 :: array :: StructArray > () . ok_or_else (|| crate :: DeserializationError :: DatatypeMismatch { expected : data . data_type () . clone () , got : data . data_type () . clone () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.RotationAxisAngle" . into () , source : Box :: new (err) , }

) ? ; if data . is_empty () { Vec :: new () }

 else { let (data_fields , data_arrays , data_bitmap) = (data . fields () , data . values () , data . validity ()) ; let is_valid = | i | data_bitmap . map_or (true , | bitmap | bitmap . get_bit (i)) ; let arrays_by_name : :: std :: collections :: HashMap < _ , _ > = data_fields . iter () . map (| field | field . name . as_str ()) . zip (data_arrays) . collect () ; let axis = { let data = & * * arrays_by_name ["axis"];

 { let data = data . as_any () . downcast_ref :: < :: arrow2 :: array :: FixedSizeListArray > () . unwrap () ; if data . is_empty () { Vec :: new () }

 else { let bitmap = data . validity () . cloned () ; let offsets = (0 ..) . step_by (3usize) . zip ((3usize ..) . step_by (3usize) . take (data . len ())) ; let data = & * * data . values () ; let data = data . as_any () . downcast_ref :: < Float32Array > () . unwrap () . into_iter () . map (| v | v . copied ()) . map (| v | v . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

)) . collect :: < crate :: DeserializationResult < Vec < _ >> > () ? ; offsets . enumerate () . map (move | (i , (start , end)) | bitmap . as_ref () . map_or (true , | bitmap | bitmap . get_bit (i)) . then (|| { data . get (start as usize .. end as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (start as usize , end as usize) , len : data . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) ? . to_vec () . try_into () . map_err (| _err | crate :: DeserializationError :: ArrayLengthMismatch { expected : 3usize , got : (end - start) as usize , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) }

) . transpose ()) . map (| res | res . map (| opt | opt . map (| v | crate :: datatypes :: Vec3D (v)))) . collect :: < crate :: DeserializationResult < Vec < Option < _ >> >> () ? }

 . into_iter () }

 }

 ; let angle = { let data = & * * arrays_by_name ["angle"];

 { use :: arrow2 :: { datatypes :: * , array :: * }

 ; use crate :: datatypes :: * ; use crate :: Loggable as _ ; Ok ({ let data = data . as_any () . downcast_ref :: < :: arrow2 :: array :: UnionArray > () . ok_or_else (|| crate :: DeserializationError :: DatatypeMismatch { expected : data . data_type () . clone () , got : data . data_type () . clone () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.Angle" . into () , source : Box :: new (err) , }

) ? ; if data . is_empty () { Vec :: new () }

 else { let (data_types , data_arrays , data_offsets) = (data . types () , data . fields () , data . offsets () . unwrap ()) ; let radians = { let data = & * data_arrays [1usize];

 data . as_any () . downcast_ref :: < Float32Array > () . unwrap () . into_iter () . map (| v | v . copied ()) . collect :: < Vec < _ >> () }

 ; let degrees = { let data = & * data_arrays [2usize];

 data . as_any () . downcast_ref :: < Float32Array > () . unwrap () . into_iter () . map (| v | v . copied ()) . collect :: < Vec < _ >> () }

 ; data_types . iter () . enumerate () . map (| (i , typ) | { let offset = data_offsets [i];

 if * typ == 0 { Ok (None) }

 else { Ok (Some (match typ { 1i8 => Angle :: Radians (radians . get (offset as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (offset as usize , offset as usize) , len : radians . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.Angle#Radians" . into () , source : Box :: new (err) , }

) ? . clone () . unwrap ()) , 2i8 => Angle :: Degrees (degrees . get (offset as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (offset as usize , offset as usize) , len : degrees . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.Angle#Degrees" . into () , source : Box :: new (err) , }

) ? . clone () . unwrap ()) , _ => unreachable ! () , }

)) }

 }

) . collect :: < crate :: DeserializationResult < Vec < _ >> > () . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.Angle" . into () , source : Box :: new (err) , }

) ? }

 }

) ? . into_iter () }

 }

 ; :: itertools :: izip ! (axis , angle) . enumerate () . map (| (i , (axis , angle)) | is_valid (i) . then (|| Ok (crate :: datatypes :: RotationAxisAngle { axis : axis . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.RotationAxisAngle#axis" . into () , source : Box :: new (err) , }

) ? , angle : angle . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.RotationAxisAngle#angle" . into () , source : Box :: new (err) , }

) ? , }

)) . transpose ()) . collect :: < crate :: DeserializationResult < Vec < _ >> > () . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.RotationAxisAngle" . into () , source : Box :: new (err) , }

) ? }

 }

) ? . into_iter () }

 . collect :: < Vec < _ >> () }

 ; data_types . iter () . enumerate () . map (| (i , typ) | { let offset = data_offsets [i];

 if * typ == 0 { Ok (None) }

 else { Ok (Some (match typ { 1i8 => Rotation3D :: Quaternion (quaternion . get (offset as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (offset as usize , offset as usize) , len : quaternion . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.Rotation3D#Quaternion" . into () , source : Box :: new (err) , }

) ? . clone () . unwrap ()) , 2i8 => Rotation3D :: AxisAngle (axis_angle . get (offset as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (offset as usize , offset as usize) , len : axis_angle . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.Rotation3D#AxisAngle" . into () , source : Box :: new (err) , }

) ? . clone () . unwrap ()) , _ => unreachable ! () , }

)) }

 }

) . collect :: < crate :: DeserializationResult < Vec < _ >> > () . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.Rotation3D" . into () , source : Box :: new (err) , }

) ? }

 }

) ? . into_iter () }

 }

 ; let scale = { let data = & * * arrays_by_name ["scale"];

 { use :: arrow2 :: { datatypes :: * , array :: * }

 ; use crate :: datatypes :: * ; use crate :: Loggable as _ ; Ok ({ let data = data . as_any () . downcast_ref :: < :: arrow2 :: array :: UnionArray > () . ok_or_else (|| crate :: DeserializationError :: DatatypeMismatch { expected : data . data_type () . clone () , got : data . data_type () . clone () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.Scale3D" . into () , source : Box :: new (err) , }

) ? ; if data . is_empty () { Vec :: new () }

 else { let (data_types , data_arrays , data_offsets) = (data . types () , data . fields () , data . offsets () . unwrap ()) ; let three_d = { let data = & * data_arrays [1usize];

 { let data = data . as_any () . downcast_ref :: < :: arrow2 :: array :: FixedSizeListArray > () . unwrap () ; if data . is_empty () { Vec :: new () }

 else { let bitmap = data . validity () . cloned () ; let offsets = (0 ..) . step_by (3usize) . zip ((3usize ..) . step_by (3usize) . take (data . len ())) ; let data = & * * data . values () ; let data = data . as_any () . downcast_ref :: < Float32Array > () . unwrap () . into_iter () . map (| v | v . copied ()) . map (| v | v . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

)) . collect :: < crate :: DeserializationResult < Vec < _ >> > () ? ; offsets . enumerate () . map (move | (i , (start , end)) | bitmap . as_ref () . map_or (true , | bitmap | bitmap . get_bit (i)) . then (|| { data . get (start as usize .. end as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (start as usize , end as usize) , len : data . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) ? . to_vec () . try_into () . map_err (| _err | crate :: DeserializationError :: ArrayLengthMismatch { expected : 3usize , got : (end - start) as usize , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) }

) . transpose ()) . map (| res | res . map (| opt | opt . map (| v | crate :: datatypes :: Vec3D (v)))) . collect :: < crate :: DeserializationResult < Vec < Option < _ >> >> () ? }

 . into_iter () }

 . collect :: < Vec < _ >> () }

 ; let uniform = { let data = & * data_arrays [2usize];

 data . as_any () . downcast_ref :: < Float32Array > () . unwrap () . into_iter () . map (| v | v . copied ()) . collect :: < Vec < _ >> () }

 ; data_types . iter () . enumerate () . map (| (i , typ) | { let offset = data_offsets [i];

 if * typ == 0 { Ok (None) }

 else { Ok (Some (match typ { 1i8 => Scale3D :: ThreeD (three_d . get (offset as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (offset as usize , offset as usize) , len : three_d . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.Scale3D#ThreeD" . into () , source : Box :: new (err) , }

) ? . clone () . unwrap ()) , 2i8 => Scale3D :: Uniform (uniform . get (offset as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (offset as usize , offset as usize) , len : uniform . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.Scale3D#Uniform" . into () , source : Box :: new (err) , }

) ? . clone () . unwrap ()) , _ => unreachable ! () , }

)) }

 }

) . collect :: < crate :: DeserializationResult < Vec < _ >> > () . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.Scale3D" . into () , source : Box :: new (err) , }

) ? }

 }

) ? . into_iter () }

 }

 ; let from_parent = { let data = & * * arrays_by_name ["from_parent"];

 data . as_any () . downcast_ref :: < BooleanArray > () . unwrap () . into_iter () }

 ; :: itertools :: izip ! (translation , rotation , scale , from_parent) . enumerate () . map (| (i , (translation , rotation , scale , from_parent)) | is_valid (i) . then (|| Ok (crate :: datatypes :: TranslationRotationScale3D { translation , rotation , scale , from_parent : from_parent . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.TranslationRotationScale3D#from_parent" . into () , source : Box :: new (err) , }

) ? , }

)) . transpose ()) . collect :: < crate :: DeserializationResult < Vec < _ >> > () . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.TranslationRotationScale3D" . into () , source : Box :: new (err) , }

) ? }

 }

) ? . into_iter () }

 . collect :: < Vec < _ >> () }

 ; data_types . iter () . enumerate () . map (| (i , typ) | { let offset = data_offsets [i];

 if * typ == 0 { Ok (None) }

 else { Ok (Some (match typ { 1i8 => Transform3D :: TranslationAndMat3X3 (translation_and_mat_3_x_3 . get (offset as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (offset as usize , offset as usize) , len : translation_and_mat_3_x_3 . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.Transform3D#TranslationAndMat3x3" . into () , source : Box :: new (err) , }

) ? . clone () . unwrap ()) , 2i8 => Transform3D :: TranslationRotationScale (translation_rotation_scale . get (offset as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (offset as usize , offset as usize) , len : translation_rotation_scale . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.Transform3D#TranslationRotationScale" . into () , source : Box :: new (err) , }

) ? . clone () . unwrap ()) , _ => unreachable ! () , }

)) }

 }

) . collect :: < crate :: DeserializationResult < Vec < _ >> > () . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.Transform3D" . into () , source : Box :: new (err) , }

) ? }

 }

) ? . into_iter () }

 . map (| v | v . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

)) . map (| res | res . map (| v | Some (crate :: components :: Transform3D (v)))) . collect :: < crate :: DeserializationResult < Vec < Option < _ >> >> () . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.components.Transform3D#repr" . into () , source : Box :: new (err) , }

) ?)
    }
}

impl crate::Component for Transform3D {}
