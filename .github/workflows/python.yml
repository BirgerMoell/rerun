name: CI (Python)

on:
  pull_request:
    paths:
      - "rerun_py/**"
      - "examples/**"
      - ".github/workflows/python.yml"
  push:
    branches:
      - "main"

env:
  PYTHON_VERSION: "3.8"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  py-lint:
    name: Python lints (black, mypy, flake8)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          just-version: 1.5

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: "rerun_py/requirements-lint.txt"

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r rerun_py/requirements-lint.txt

      - name: Lint Python
        run: |
          just py-lint

  #py-run-examples:
  #  name: Run Python examples (headless mode)
  #  runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/checkout@v3

  #    - run: |
  #        sudo apt-get update
  #        sudo apt-get install libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libspeechd-dev libxkbcommon-dev libssl-dev # eframe reqs

  #    - name: Set up cargo cache
  #      uses: Swatinem/rust-cache@v2
  #      with:
  #        # See: https://github.com/rerun-io/rerun/pull/497
  #        save-if: ${{ github.event_name == 'push'}}

  #    - name: Set up Python
  #      uses: actions/setup-python@v4
  #      with:
  #        python-version: "3.8"
  #        cache: "pip"
  #        cache-dependency-path: "rerun_py/requirements-build.txt"

  #    - name: Install Python dependencies
  #      run: |
  #        pip install --upgrade pip
  #        pip install -r rerun_py/requirements-build.txt
  #        pip install ./rerun_py

  #    - name: Run Car example
  #      run: |
  #        pip install -r examples/car/requirements.txt && ./examples/car/main.py --headless

  macos:
    name: Build Python Wheels for MacOS
    runs-on: macos-latest
    #if: "startsWith(github.ref, 'refs/tags/')" # slow; uses up a lot of CI minutes
    steps:
      - uses: actions/checkout@v3

      - name: Set up cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          # See: https://github.com/rerun-io/rerun/pull/497
          save-if: ${{ github.event_name == 'push'}}

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: "rerun_py/requirements-build.txt"
          architecture: x64

      - name: Build wheel x86_64
        uses: PyO3/maturin-action@v1
        with:
          maturin-version: "0.14.10"
          command: build
          target: x86_64
          args: |
            --manifest-path rerun_py/Cargo.toml
            --release
            --out dist
            --sdist

      - name: Build wheel - universal2
        uses: PyO3/maturin-action@v1
        with:
          maturin-version: "0.14.10"
          command: build
          args: |
            --manifest-path rerun_py/Cargo.toml
            --release
            --out dist
            --universal2

      - name: Install built wheel
        run: |
          pip install rerun-sdk --find-links dist --force-reinstall
          pip install pytest #TODO(john) move to requirements-build.txt
          cd rerun_py/tests && pytest

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  windows:
    name: Build Python Wheels for Windows
    runs-on: windows-latest-8-cores
    strategy:
      matrix:
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v3

      - name: Set up cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          # See: https://github.com/rerun-io/rerun/pull/497
          save-if: ${{ github.event_name == 'push'}}

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          architecture: ${{ matrix.target }}
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: "rerun_py/requirements-build.txt"

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: |
            --manifest-path rerun_py/Cargo.toml
            --release
            --out dist

      - name: Install built wheel
        run: |
          pip install rerun-sdk --find-links dist --force-reinstall
          pip install pytest
          cd rerun_py/tests && pytest

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  linux:
    name: Build Python Wheels for Linux
    runs-on: ubuntu-latest-16-cores
    container:
      image: rerunio/ci_docker:0.3
    strategy:
      matrix:
        #target: [x86_64, i686]
        target: [x86_64]
    steps:
      - uses: actions/checkout@v3

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y lsb-release
      #    sudo apt-get install libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libspeechd-dev libxkbcommon-dev libssl-dev # eframe reqs

      - name: Set up cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          env-vars: CARGO CC CFLAGS CXX CMAKE RUST CACHE_KEY
          # See: https://github.com/rerun-io/rerun/pull/497
          save-if: ${{ github.event_name == 'push'}}

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          #architecture: x64
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: "rerun_py/requirements-build.txt"

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          maturin-version: "0.14.10"
          target: ${{ matrix.target }}
          manylinux: auto
          args: |
            --manifest-path rerun_py/Cargo.toml
            --release
            --out dist

      - name: Install built wheel
        if: matrix.target == 'x86_64'
        run: |
          pip install rerun-sdk --find-links dist --force-reinstall
          pip install pytest
          cd rerun_py/tests && pytest

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  pre-release:
    name: Pre Release
    needs: [ macos, windows, linux ]
    runs-on: "ubuntu-latest"
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: wheels

      - name: Github Release
        uses: marvinpinto/action-automatic-releases@v1.2.1
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: dist/*

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [ macos, windows, linux ]
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: wheels

      - name: Publish to PyPI
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_PASSWORD }}
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --skip-existing *

  py-docs:
    name: Build and deploy docs
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Don't do a shallow clone

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"
          cache-dependency-path: "rerun_py/requirements-doc.txt"

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r rerun_py/requirements-doc.txt

      - name: Set up git author
        run: |
          remote_repo="https://${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy via mike # https://github.com/jimporter/mike
        run: |
          mike deploy -F rerun_py/mkdocs.yml -p --rebase -b gh-pages HEAD
