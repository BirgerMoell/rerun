# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python.rs
# Based on "crates/re_types/definitions/rerun/blueprint/datatypes/space_view_component.fbs".

# You can extend this class by creating a "SpaceViewComponentExt" class in "space_view_component_ext.py".

from __future__ import annotations

from typing import Any, Sequence, Union

import pyarrow as pa
from attrs import define, field

from ... import datatypes
from ..._baseclasses import BaseBatch, BaseExtensionType

__all__ = [
    "SpaceViewComponent",
    "SpaceViewComponentArrayLike",
    "SpaceViewComponentBatch",
    "SpaceViewComponentLike",
    "SpaceViewComponentType",
]


def _space_view_component__space_origin__special_field_converter_override(
    x: datatypes.EntityPathLike
) -> datatypes.EntityPath:
    if isinstance(x, datatypes.EntityPath):
        return x
    else:
        return datatypes.EntityPath(x)


@define(init=False)
class SpaceViewComponent:
    """
    **Datatype**: A view of a space.

    Unstable. Used for the ongoing blueprint experimentations.
    """

    def __init__(
        self: Any,
        display_name: str,
        class_identifier: str,
        space_origin: datatypes.EntityPathLike,
        entities_determined_by_user: bool,
        contents: datatypes.UuidArrayLike,
    ):
        """
        Create a new instance of the SpaceViewComponent datatype.

        Parameters
        ----------
        display_name:
            The name of the view.
        class_identifier:
            The class of the view.
        space_origin:
            The "anchor point" of this space view.

            The transform at this path forms the reference point for all scene->world transforms in this space view.
            I.e. the position of this entity path in space forms the origin of the coordinate system in this space view.
            Furthermore, this is the primary indicator for heuristics on what entities we show in this space view.
        entities_determined_by_user:
            True if the user is expected to add entities themselves. False otherwise.
        contents:
            `BlueprintId`s of the `DataQuery`s that make up this `SpaceView`.

            It determines which entities are part of the spaceview.
        """

        # You can define your own __init__ function as a member of SpaceViewComponentExt in space_view_component_ext.py
        self.__attrs_init__(
            display_name=display_name,
            class_identifier=class_identifier,
            space_origin=space_origin,
            entities_determined_by_user=entities_determined_by_user,
            contents=contents,
        )

    display_name: str = field(converter=str)
    # The name of the view.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    class_identifier: str = field(converter=str)
    # The class of the view.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    space_origin: datatypes.EntityPath = field(
        converter=_space_view_component__space_origin__special_field_converter_override
    )
    # The "anchor point" of this space view.
    #
    # The transform at this path forms the reference point for all scene->world transforms in this space view.
    # I.e. the position of this entity path in space forms the origin of the coordinate system in this space view.
    # Furthermore, this is the primary indicator for heuristics on what entities we show in this space view.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    entities_determined_by_user: bool = field(converter=bool)
    # True if the user is expected to add entities themselves. False otherwise.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    contents: list[datatypes.Uuid] = field()
    # `BlueprintId`s of the `DataQuery`s that make up this `SpaceView`.
    #
    # It determines which entities are part of the spaceview.
    #
    # (Docstring intentionally commented out to hide this field from the docs)


SpaceViewComponentLike = SpaceViewComponent
SpaceViewComponentArrayLike = Union[
    SpaceViewComponent,
    Sequence[SpaceViewComponentLike],
]


class SpaceViewComponentType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.blueprint.datatypes.SpaceViewComponent"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.struct(
                [
                    pa.field("display_name", pa.utf8(), nullable=False, metadata={}),
                    pa.field("class_identifier", pa.utf8(), nullable=False, metadata={}),
                    pa.field("space_origin", pa.utf8(), nullable=False, metadata={}),
                    pa.field("entities_determined_by_user", pa.bool_(), nullable=False, metadata={}),
                    pa.field(
                        "contents",
                        pa.list_(
                            pa.field(
                                "item",
                                pa.struct(
                                    [
                                        pa.field(
                                            "bytes",
                                            pa.list_(pa.field("item", pa.uint8(), nullable=False, metadata={}), 16),
                                            nullable=False,
                                            metadata={},
                                        )
                                    ]
                                ),
                                nullable=False,
                                metadata={},
                            )
                        ),
                        nullable=False,
                        metadata={},
                    ),
                ]
            ),
            self._TYPE_NAME,
        )


class SpaceViewComponentBatch(BaseBatch[SpaceViewComponentArrayLike]):
    _ARROW_TYPE = SpaceViewComponentType()

    @staticmethod
    def _native_to_pa_array(data: SpaceViewComponentArrayLike, data_type: pa.DataType) -> pa.Array:
        raise NotImplementedError  # You need to implement native_to_pa_array_override in space_view_component_ext.py
