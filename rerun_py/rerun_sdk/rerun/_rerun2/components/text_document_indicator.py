# DO NOT EDIT!: This file was auto-generated by crates/re_types_builder/src/codegen/python.rs:277.

from __future__ import annotations

from typing import Sequence, Union

import pyarrow as pa
from attrs import define, field

from .._baseclasses import (
    BaseExtensionArray,
    BaseExtensionType,
)

__all__ = [
    "TextDocumentIndicator",
    "TextDocumentIndicatorArray",
    "TextDocumentIndicatorArrayLike",
    "TextDocumentIndicatorLike",
    "TextDocumentIndicatorType",
]


@define
class TextDocumentIndicator:
    """
    Indicator component for the `rerun.components.TextDocumentIndicator` archetype.

    Indicator components are data-less components used to give some extra context.
    The Rerun Viewer can make use of them to provide better heuristics and even improve performance
    in some cases.
    """

    TextDocumentIndicator: () = field(converter=())


TextDocumentIndicatorLike = TextDocumentIndicator
TextDocumentIndicatorArrayLike = Union[
    TextDocumentIndicator,
    Sequence[TextDocumentIndicatorLike],
]


# --- Arrow support ---


class TextDocumentIndicatorType(BaseExtensionType):
    def __init__(self) -> None:
        pa.ExtensionType.__init__(self, pa.null(), "rerun.components.TextDocumentIndicator")


class TextDocumentIndicatorArray(BaseExtensionArray[TextDocumentIndicatorArrayLike]):
    _EXTENSION_NAME = "rerun.components.TextDocumentIndicator"
    _EXTENSION_TYPE = TextDocumentIndicatorType

    @staticmethod
    def _native_to_pa_array(data: TextDocumentIndicatorArrayLike, data_type: pa.DataType) -> pa.Array:
        raise NotImplementedError  # You need to implement "textdocumentindicator_native_to_pa_array" in rerun_py/rerun_sdk/rerun/_rerun2/components/_overrides/text_document_indicator.py


TextDocumentIndicatorType._ARRAY_TYPE = TextDocumentIndicatorArray

# TODO(cmc): bring back registration to pyarrow once legacy types are gone
# pa.register_extension_type(TextDocumentIndicatorType())
