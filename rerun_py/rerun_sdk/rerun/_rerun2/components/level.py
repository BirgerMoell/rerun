# NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.

from __future__ import annotations

from typing import TYPE_CHECKING, Any, Sequence, Union

import pyarrow as pa
from attrs import define, field

from .._baseclasses import (
    BaseExtensionArray,
    BaseExtensionType,
)

__all__ = ["Level", "LevelArray", "LevelArrayLike", "LevelLike", "LevelType"]


@define
class Level:
    """A String label component."""

    value: str = field(converter=str)

    def __str__(self) -> str:
        return str(self.value)


if TYPE_CHECKING:
    LevelLike = Union[Level, str]
else:
    LevelLike = Any

LevelArrayLike = Union[Level, Sequence[LevelLike], str, Sequence[str]]


# --- Arrow support ---


class LevelType(BaseExtensionType):
    def __init__(self) -> None:
        pa.ExtensionType.__init__(self, pa.utf8(), "rerun.label")


class LevelArray(BaseExtensionArray[LevelArrayLike]):
    _EXTENSION_NAME = "rerun.label"
    _EXTENSION_TYPE = LevelType

    @staticmethod
    def _native_to_pa_array(data: LevelArrayLike, data_type: pa.DataType) -> pa.Array:
        raise NotImplementedError


LevelType._ARRAY_TYPE = LevelArray

# TODO(cmc): bring back registration to pyarrow once legacy types are gone
# pa.register_extension_type(LevelType())
