# DO NOT EDIT!: This file was auto-generated by crates/re_types_builder/src/codegen/python.rs:277.

from __future__ import annotations

from typing import Sequence, Union

import pyarrow as pa
from attrs import define, field

from .._baseclasses import (
    BaseExtensionArray,
    BaseExtensionType,
)

__all__ = [
    "Points2DIndicator",
    "Points2DIndicatorArray",
    "Points2DIndicatorArrayLike",
    "Points2DIndicatorLike",
    "Points2DIndicatorType",
]


@define
class Points2DIndicator:
    """
    Indicator component for the `rerun.components.Points2DIndicator` archetype.

    Indicator components are data-less components used to give some extra context.
    The Rerun Viewer can make use of them to provide better heuristics and even improve performance
    in some cases.
    """

    Points2DIndicator: () = field(converter=())


Points2DIndicatorLike = Points2DIndicator
Points2DIndicatorArrayLike = Union[
    Points2DIndicator,
    Sequence[Points2DIndicatorLike],
]


# --- Arrow support ---


class Points2DIndicatorType(BaseExtensionType):
    def __init__(self) -> None:
        pa.ExtensionType.__init__(self, pa.null(), "rerun.components.Points2DIndicator")


class Points2DIndicatorArray(BaseExtensionArray[Points2DIndicatorArrayLike]):
    _EXTENSION_NAME = "rerun.components.Points2DIndicator"
    _EXTENSION_TYPE = Points2DIndicatorType

    @staticmethod
    def _native_to_pa_array(data: Points2DIndicatorArrayLike, data_type: pa.DataType) -> pa.Array:
        raise NotImplementedError  # You need to implement "points2dindicator_native_to_pa_array" in rerun_py/rerun_sdk/rerun/_rerun2/components/_overrides/points2d_indicator.py


Points2DIndicatorType._ARRAY_TYPE = Points2DIndicatorArray

# TODO(cmc): bring back registration to pyarrow once legacy types are gone
# pa.register_extension_type(Points2DIndicatorType())
